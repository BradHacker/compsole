{
    "swagger": "2.0",
    "info": {
        "description": "This is the Compsole API documentation.\n\n### Authenticating\n\nThere are two methods of authenticating to the Compsole API. **Basic Auth** is used solely for the purpose of the Compsole UI. **Api Key Auth** is used for service accounts to authenticate prior to accessing the REST endpoints.\n\n#### Basic Auth\n\nUse the [`/auth/local/login`](#operations-Auth_API-post_auth_local_login) endpoint below to authenticate from the Compsole UI.\n\n#### Api Key Auth\n\nAPI Key Authentication is more complicated.\n\n1. You must retreive your `api_key` and `api_secret` from the Compsole UI after creating a service account.\n2. Use the [`/rest/token`](#operations-Auth_API-post_rest_login) endpoint to retrieve an API Token to use in requests\n3. Place the API Token into the `Authorization` header like so: `Authorization: Bearer \u003capi token here...\u003e`\n\n##### Refresh Tokens\n\nRefresh tokens can be used to renew a session without re-authenticating. The refresh token should be set in the `refresh-token` cookie already, so you can simply make a `POST` request to `/rest/token/refresh` and receive a new API token from this endpoint.\n",
        "title": "Compsole API",
        "contact": {
            "name": "BradHacker",
            "url": "http://github.com/BradHacker/compsole/issues"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/api",
    "paths": {
        "/auth/local/login": {
            "post": {
                "description": "Login with a local account",
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth API"
                ],
                "summary": "Login with a local account",
                "parameters": [
                    {
                        "description": "User account details",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UserLoginVals"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        },
                        "headers": {
                            "Cookie": {
                                "type": "string",
                                "description": "`auth-cookie` contains the session token"
                            }
                        }
                    }
                }
            }
        },
        "/rest/competition": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "List all Competitions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "List all Competitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Competition"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Create a Competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Create a Competition",
                "parameters": [
                    {
                        "description": "The competition to create",
                        "name": "competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateCompetition.CompetitionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Competition"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/competition/{id}": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Get a Competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Get a Competition",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the competition",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Competition"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Update a Competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Update a Competition",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the competition",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated competition",
                        "name": "competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateCompetition.CompetitionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Competition"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Delete a Competition",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Delete a Competition",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the competition",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/provider": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "List all Providers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "List all Providers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Provider"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Create a Provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Create a Provider",
                "parameters": [
                    {
                        "description": "The provider to create",
                        "name": "provider",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateProvider.ProviderInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Provider"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/provider/{id}": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Get a provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Get a provider",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the provider",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Provider"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Update a Provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Update a Provider",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the provider",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated provider",
                        "name": "provider",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateProvider.ProviderInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Provider"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Delete a Provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Delete a Provider",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the provider",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/team": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "List all Teams",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "List all Teams",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Team"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Create a Team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Create a Team",
                "parameters": [
                    {
                        "description": "The team to create",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateTeam.TeamInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Team"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/team/{id}": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Get a Team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Get a Team",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Team"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Update a Team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Update a Team",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated team",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateTeam.TeamInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.Team"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Delete a Team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Delete a Team",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the team",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/token": {
            "post": {
                "description": "Login with a service account and get a session token. The refresh token is set as a cookie in the response and can be used to refresh a session without re-authenticating.",
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth API"
                ],
                "summary": "Login with a service account and get a session token",
                "parameters": [
                    {
                        "description": "Service account details",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.ServiceLoginVals"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.ServiceLoginResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/token/refresh": {
            "post": {
                "description": "Refresh a service account session without re-authenticating",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth API"
                ],
                "summary": "Refresh a service account session without re-authenticating",
                "parameters": [
                    {
                        "type": "string",
                        "default": "refresh-token=xxx",
                        "description": "refresh-token",
                        "name": "Cookie",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.ServiceLoginResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/user": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "List all Users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "List all Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Create a User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Create a User",
                "parameters": [
                    {
                        "description": "The user to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateUser.UserInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/user/{id}": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Get a User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Get a User",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Update a User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Update a User",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateUser.UserInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Delete a User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Delete a User",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/vm-object": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "List all VM Objects",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "List all VM Objects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/rest.VmObjectModel"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Create a VM Object",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Create a VM Object",
                "parameters": [
                    {
                        "description": "The vm object to create",
                        "name": "vm_object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.VmObjectInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/rest.VmObjectModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/rest/vm-object/{id}": {
            "get": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Get a VM Object",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Get a VM Object",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the vm object",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rest.VmObjectModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Update a VM Object",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Update a VM Object",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the vm object",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The updated vm object",
                        "name": "vm_object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.VmObjectInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/rest.VmObjectModel"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ServiceAuth": []
                    }
                ],
                "description": "Delete a VM Object",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service API"
                ],
                "summary": "Delete a VM Object",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                        "description": "The id of the vm object",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "action.Type": {
            "type": "string",
            "enum": [
                "SIGN_IN",
                "FAILED_SIGN_IN",
                "SIGN_OUT",
                "API_CALL",
                "CONSOLE_ACCESS",
                "POWER_STATE",
                "REBOOT",
                "SHUTDOWN",
                "POWER_ON",
                "POWER_OFF",
                "CHANGE_SELF_PASSWORD",
                "CHANGE_PASSWORD",
                "CREATE_OBJECT",
                "UPDATE_OBJECT",
                "DELETE_OBJECT",
                "UPDATE_LOCKOUT"
            ],
            "x-enum-varnames": [
                "TypeSIGN_IN",
                "TypeFAILED_SIGN_IN",
                "TypeSIGN_OUT",
                "TypeAPI_CALL",
                "TypeCONSOLE_ACCESS",
                "TypePOWER_STATE",
                "TypeREBOOT",
                "TypeSHUTDOWN",
                "TypePOWER_ON",
                "TypePOWER_OFF",
                "TypeCHANGE_SELF_PASSWORD",
                "TypeCHANGE_PASSWORD",
                "TypeCREATE_OBJECT",
                "TypeUPDATE_OBJECT",
                "TypeDELETE_OBJECT",
                "TypeUPDATE_LOCKOUT"
            ]
        },
        "api.APIError": {
            "type": "object",
            "properties": {
                "error": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "auth.UserLoginVals": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "ent.Action": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ActionQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ActionEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "ip_address": {
                    "description": "IPAddress holds the value of the \"ip_address\" field.",
                    "type": "string"
                },
                "message": {
                    "description": "Message holds the value of the \"message\" field.",
                    "type": "string"
                },
                "performed_at": {
                    "description": "PerformedAt holds the value of the \"performed_at\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/action.Type"
                        }
                    ]
                }
            }
        },
        "ent.ActionEdges": {
            "type": "object",
            "properties": {
                "ActionToServiceAccount": {
                    "description": "ActionToServiceAccount holds the value of the ActionToServiceAccount edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ServiceAccount"
                        }
                    ]
                },
                "ActionToUser": {
                    "description": "ActionToUser holds the value of the ActionToUser edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Competition": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CompetitionQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.CompetitionEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.\n[REQUIRED] The unique name (aka. slug) for the competition.",
                    "type": "string"
                }
            }
        },
        "ent.CompetitionEdges": {
            "type": "object",
            "properties": {
                "CompetitionToProvider": {
                    "description": "CompetitionToProvider holds the value of the CompetitionToProvider edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Provider"
                        }
                    ]
                },
                "CompetitionToTeams": {
                    "description": "CompetitionToTeams holds the value of the CompetitionToTeams edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Team"
                    }
                }
            }
        },
        "ent.Provider": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Config holds the value of the \"config\" field.\n[REQUIRED] This is the JSON configuration for the provider.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ProviderQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ProviderEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.\n[REQUIRED] The unique name (aka. slug) for the provider.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.\n[REQUIRED] The type of provider this is (must match a registered one in https://github.com/BradHacker/compsole/tree/main/compsole/providers)",
                    "type": "string"
                }
            }
        },
        "ent.ProviderEdges": {
            "type": "object",
            "properties": {
                "ProviderToCompetitions": {
                    "description": "ProviderToCompetitions holds the value of the ProviderToCompetitions edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Competition"
                    }
                }
            }
        },
        "ent.ServiceAccount": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Active holds the value of the \"active\" field.\n[REQUIRED] Determines whether or not the service account is active or not",
                    "type": "boolean"
                },
                "api_key": {
                    "description": "APIKey holds the value of the \"api_key\" field.\n[REQUIRED] The API key for the service account. Equivalent to a username.",
                    "type": "string"
                },
                "api_secret": {
                    "description": "APISecret holds the value of the \"api_secret\" field.\n[REQUIRED] The API secret for the service account. This value MUST be protected.",
                    "type": "string"
                },
                "display_name": {
                    "description": "DisplayName holds the value of the \"display_name\" field.\n[REQUIRED] The display/common name for the service account.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ServiceAccountQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ServiceAccountEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                }
            }
        },
        "ent.ServiceAccountEdges": {
            "type": "object",
            "properties": {
                "ServiceAccountToActions": {
                    "description": "ServiceAccountToActions holds the value of the ServiceAccountToActions edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Action"
                    }
                },
                "ServiceAccountToToken": {
                    "description": "ServiceAccountToToken holds the value of the ServiceAccountToToken edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.ServiceToken"
                    }
                }
            }
        },
        "ent.ServiceToken": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ServiceTokenQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ServiceTokenEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "issued_at": {
                    "description": "IssuedAt holds the value of the \"issued_at\" field.\n[REQUIRED] The time the token was issued",
                    "type": "integer"
                },
                "refresh_token": {
                    "description": "RefreshToken holds the value of the \"refresh_token\" field.\n[REQUIRED] The refresh token used to renew an expired service account session. These are valid for `REFRESH_WINDOW` hours.",
                    "type": "string"
                },
                "token": {
                    "description": "Token holds the value of the \"token\" field.\n[REQUIRED] The API token for a service account session.",
                    "type": "string"
                }
            }
        },
        "ent.ServiceTokenEdges": {
            "type": "object",
            "properties": {
                "TokenToServiceAccount": {
                    "description": "TokenToServiceAccount holds the value of the TokenToServiceAccount edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.ServiceAccount"
                        }
                    ]
                }
            }
        },
        "ent.Team": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TeamQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TeamEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.\n[OPTIONAL] The display name for the team.",
                    "type": "string"
                },
                "team_number": {
                    "description": "TeamNumber holds the value of the \"team_number\" field.\n[REQUIRED] The team number.",
                    "type": "integer"
                }
            }
        },
        "ent.TeamEdges": {
            "type": "object",
            "properties": {
                "TeamToCompetition": {
                    "description": "TeamToCompetition holds the value of the TeamToCompetition edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Competition"
                        }
                    ]
                },
                "TeamToUsers": {
                    "description": "TeamToUsers holds the value of the TeamToUsers edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.User"
                    }
                },
                "TeamToVmObjects": {
                    "description": "TeamToVmObjects holds the value of the TeamToVmObjects edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.VmObject"
                    }
                }
            }
        },
        "ent.Token": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TokenQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TokenEdges"
                        }
                    ]
                },
                "expire_at": {
                    "description": "ExpireAt holds the value of the \"expire_at\" field.\n[REQUIRED] The time the token should expire.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "token": {
                    "description": "Token holds the value of the \"token\" field.\n[REQUIRED] The auth-token cookie value for the user session.",
                    "type": "string"
                }
            }
        },
        "ent.TokenEdges": {
            "type": "object",
            "properties": {
                "TokenToUser": {
                    "description": "TokenToUser holds the value of the TokenToUser edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.UserEdges"
                        }
                    ]
                },
                "first_name": {
                    "description": "FirstName holds the value of the \"first_name\" field.\n[OPTIONAL] The display first name for the user.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName holds the value of the \"last_name\" field.\n[OPTIONAL] The display last name for the user",
                    "type": "string"
                },
                "provider": {
                    "description": "Provider holds the value of the \"provider\" field.\n[REQUIRED] The type of login the user will be using.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Provider"
                        }
                    ]
                },
                "role": {
                    "description": "Role holds the value of the \"role\" field.\n[REQUIRED] The role of the user. Admins have full access.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Role"
                        }
                    ]
                },
                "username": {
                    "description": "Username holds the value of the \"username\" field.\n[REQUIRED] The username for the user.",
                    "type": "string"
                }
            }
        },
        "ent.UserEdges": {
            "type": "object",
            "properties": {
                "UserToActions": {
                    "description": "UserToActions holds the value of the UserToActions edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Action"
                    }
                },
                "UserToTeam": {
                    "description": "UserToTeam holds the value of the UserToTeam edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Team"
                        }
                    ]
                },
                "UserToToken": {
                    "description": "UserToToken holds the value of the UserToToken edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Token"
                    }
                }
            }
        },
        "ent.VmObject": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the VmObjectQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.VmObjectEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "identifier": {
                    "description": "Identifier holds the value of the \"identifier\" field.\n[REQUIRED] The identifier of the VM. This will be provider-specific.",
                    "type": "string"
                },
                "ip_addresses": {
                    "description": "IPAddresses holds the value of the \"ip_addresses\" field.\n[OPTIONAL] IP addresses of the VM. This will be displayed to the user.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "locked": {
                    "description": "Locked holds the value of the \"locked\" field.\n[REQUIRED] (default is false) If a vm is locked, standard users will not be able to access this VM.",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.\n[REQUIRED] A user-friendly name for the VM. This will be provider-specific.",
                    "type": "string"
                }
            }
        },
        "ent.VmObjectEdges": {
            "type": "object",
            "properties": {
                "VmObjectToTeam": {
                    "description": "VmObjectToTeam holds the value of the VmObjectToTeam edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Team"
                        }
                    ]
                }
            }
        },
        "rest.CreateCompetition.CompetitionInput": {
            "type": "object",
            "required": [
                "competition_to_provider",
                "name"
            ],
            "properties": {
                "competition_to_provider": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "name": {
                    "type": "string",
                    "example": "ISTS 'XX"
                }
            }
        },
        "rest.CreateProvider.ProviderInput": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {
                    "description": "See https://github.com/BradHacker/compsole/tree/main/configs for examples",
                    "type": "string",
                    "example": "See https://github.com/BradHacker/compsole/tree/main/configs for examples"
                },
                "name": {
                    "type": "string",
                    "example": "RITSEC Openstack"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "OPENSTACK"
                    ],
                    "example": "OPENSTACK"
                }
            }
        },
        "rest.CreateTeam.TeamInput": {
            "type": "object",
            "required": [
                "name",
                "team_number",
                "team_to_competition"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "ISTS 'XX"
                },
                "team_number": {
                    "type": "integer",
                    "example": 1
                },
                "team_to_competition": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
            }
        },
        "rest.CreateUser.UserInput": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "role",
                "username"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "USER",
                        "ADMIN"
                    ],
                    "example": "USER"
                },
                "user_to_team": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "username": {
                    "type": "string",
                    "example": "compsole"
                }
            }
        },
        "rest.ServiceLoginResult": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "token_expires_at": {
                    "type": "integer"
                }
            }
        },
        "rest.ServiceLoginVals": {
            "type": "object",
            "required": [
                "api_key",
                "api_secret"
            ],
            "properties": {
                "api_key": {
                    "type": "string"
                },
                "api_secret": {
                    "type": "string"
                }
            }
        },
        "rest.TeamEdge": {
            "description": "Used for Team in edges",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Fields",
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "name": {
                    "description": "[OPTIONAL] The display name for the team.",
                    "type": "string",
                    "example": "Team 1"
                },
                "team_number": {
                    "description": "[REQUIRED] The team number.",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "rest.UpdateCompetition.CompetitionInput": {
            "type": "object",
            "required": [
                "competition_to_provider",
                "name"
            ],
            "properties": {
                "competition_to_provider": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "name": {
                    "type": "string",
                    "example": "ISTS 'XX"
                }
            }
        },
        "rest.UpdateProvider.ProviderInput": {
            "type": "object",
            "required": [
                "config",
                "name",
                "type"
            ],
            "properties": {
                "config": {
                    "description": "See https://github.com/BradHacker/compsole/tree/main/configs for examples",
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "RITSEC Openstack"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "OPENSTACK"
                    ]
                }
            }
        },
        "rest.UpdateTeam.TeamInput": {
            "type": "object",
            "required": [
                "name",
                "team_number",
                "team_to_competition"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "ISTS 'XX"
                },
                "team_number": {
                    "type": "integer",
                    "example": 1
                },
                "team_to_competition": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
            }
        },
        "rest.UpdateUser.UserInput": {
            "type": "object",
            "required": [
                "first_name",
                "last_name",
                "role",
                "username"
            ],
            "properties": {
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "USER",
                        "ADMIN"
                    ],
                    "example": "USER"
                },
                "user_to_team": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "username": {
                    "type": "string",
                    "example": "compsole"
                }
            }
        },
        "rest.VmObjectInput": {
            "description": "Used as an input model for creating/updating VM Objects",
            "type": "object",
            "required": [
                "identifier",
                "ip_addresses",
                "name",
                "vm_object_to_team"
            ],
            "properties": {
                "identifier": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "ip_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "10.0.0.1",
                        "100.64.0.1"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "team01.dc.comp.co"
                },
                "vm_object_to_team": {
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
            }
        },
        "rest.VmObjectModel": {
            "description": "Used for VM Object endpoints",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Fields",
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "identifier": {
                    "description": "[REQUIRED] The identifier of the VM. This will be provider-specific.",
                    "type": "string",
                    "example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                },
                "ip_addresses": {
                    "description": "[OPTIONAL] IP addresses of the VM. This will be displayed to the user.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "10.0.0.1",
                        "100.64.0.1"
                    ]
                },
                "locked": {
                    "description": "[REQUIRED] (default is false) If a vm is locked, standard users will not be able to access this VM.",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "[REQUIRED] A user-friendly name for the VM. This will be provider-specific.",
                    "type": "string",
                    "example": "team01.dc.comp.co"
                },
                "vm_object_to_team": {
                    "description": "Edges",
                    "allOf": [
                        {
                            "$ref": "#/definitions/rest.TeamEdge"
                        }
                    ]
                }
            }
        },
        "user.Provider": {
            "type": "string",
            "enum": [
                "LOCAL",
                "GITLAB"
            ],
            "x-enum-varnames": [
                "ProviderLOCAL",
                "ProviderGITLAB"
            ]
        },
        "user.Role": {
            "type": "string",
            "enum": [
                "USER",
                "ADMIN"
            ],
            "x-enum-varnames": [
                "RoleUSER",
                "RoleADMIN"
            ]
        }
    },
    "securityDefinitions": {
        "ServiceAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "UserAuth": {
            "type": "basic"
        }
    },
    "tags": [
        {
            "description": "These endpoints are used purely for authentication purposes only",
            "name": "Auth API"
        },
        {
            "description": "These endpoints are only usable after authenticating with a service account. They are used for 3rd-party applications to interact with Compsole.",
            "name": "Service API"
        }
    ]
}