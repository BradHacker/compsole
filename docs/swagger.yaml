basePath: /api
definitions:
  api.APIError:
    properties:
      error: {}
      message:
        type: string
    type: object
  auth.UserLoginVals:
    description: Used as an input to the login input
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  auth.UserModel:
    description: Used for User login
    properties:
      first_name:
        description: '[OPTIONAL] The display first name for the user.'
        example: Default
        type: string
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      last_name:
        description: '[OPTIONAL] The display last name for the user.'
        example: User
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        description: '[REQUIRED] The role of the user. Admins have full access.'
        example: USER
      user_to_team:
        allOf:
        - $ref: '#/definitions/rest.TeamEdge'
        description: Edges
      username:
        description: '[REQUIRED] The username for the user.'
        example: compsole
        type: string
    type: object
  rest.CompetitionEdge:
    description: Used for Competition in edges
    properties:
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[REQUIRED] The unique name (aka. slug) for the competition.'
        example: Test Competition
        type: string
    type: object
  rest.CompetitionInput:
    description: Used as an input model for creating/updating Competitions
    properties:
      competition_to_provider:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        example: ISTS 'XX
        type: string
    required:
    - competition_to_provider
    - name
    type: object
  rest.CompetitionModel:
    description: Used for Competition endpoints
    properties:
      competition_to_provider:
        $ref: '#/definitions/rest.ProviderEdge'
      competition_to_teams:
        description: Edges
        items:
          $ref: '#/definitions/rest.TeamEdge'
        type: array
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[REQUIRED] The unique name (aka. slug) for the competition.'
        example: Test Competition
        type: string
    type: object
  rest.ProviderEdge:
    description: Used for Provider in edges
    properties:
      config:
        description: '[REQUIRED] This is the JSON configuration for the provider.'
        example: '{...}'
        type: string
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[REQUIRED] The unique name (aka. slug) for the provider.'
        example: Local Openstack
        type: string
      type:
        description: '[REQUIRED] The type of provider this is (must match a registered
          one in https://github.com/BradHacker/compsole/tree/main/compsole/providers)'
        example: OPENSTACK
        type: string
    type: object
  rest.ProviderInput:
    description: Used as an input model for creating/updating Providers
    properties:
      config:
        description: See https://github.com/BradHacker/compsole/tree/main/configs
          for examples
        example: See https://github.com/BradHacker/compsole/tree/main/configs for
          examples
        type: string
      name:
        example: RITSEC Openstack
        type: string
      type:
        enum:
        - OPENSTACK
        example: OPENSTACK
        type: string
    required:
    - config
    - name
    - type
    type: object
  rest.ProviderModel:
    description: Used for Provider endpoints
    properties:
      config:
        description: '[REQUIRED] This is the JSON configuration for the provider.'
        example: '{...}'
        type: string
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[REQUIRED] The unique name (aka. slug) for the provider.'
        example: Local Openstack
        type: string
      provider_to_competitions:
        description: Edges
        items:
          $ref: '#/definitions/rest.CompetitionEdge'
        type: array
      type:
        description: '[REQUIRED] The type of provider this is (must match a registered
          one in https://github.com/BradHacker/compsole/tree/main/compsole/providers)'
        example: OPENSTACK
        type: string
    type: object
  rest.ServiceLoginResult:
    properties:
      token:
        type: string
      token_expires_at:
        type: integer
    type: object
  rest.ServiceLoginVals:
    properties:
      api_key:
        type: string
      api_secret:
        type: string
    required:
    - api_key
    - api_secret
    type: object
  rest.TeamEdge:
    description: Used for Team in edges
    properties:
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[OPTIONAL] The display name for the team.'
        example: Team 1
        type: string
      team_number:
        description: '[REQUIRED] The team number.'
        example: 1
        type: integer
    type: object
  rest.TeamInput:
    description: Used as an input model for creating/updating Teams
    properties:
      name:
        example: ISTS 'XX
        type: string
      team_number:
        example: 1
        type: integer
      team_to_competition:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
    required:
    - name
    - team_number
    - team_to_competition
    type: object
  rest.TeamModel:
    description: Used for Team endpoints
    properties:
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      name:
        description: '[OPTIONAL] The display name for the team.'
        example: Team 1
        type: string
      team_number:
        description: '[REQUIRED] The team number.'
        example: 1
        type: integer
      team_to_competition:
        allOf:
        - $ref: '#/definitions/rest.CompetitionEdge'
        description: Edges
      team_to_users:
        items:
          $ref: '#/definitions/rest.UserEdge'
        type: array
      team_to_vm_objects:
        items:
          $ref: '#/definitions/rest.VmObjectEdge'
        type: array
    type: object
  rest.UserEdge:
    description: Used for User in edges
    properties:
      first_name:
        description: '[OPTIONAL] The display first name for the user.'
        example: Default
        type: string
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      last_name:
        description: '[OPTIONAL] The display last name for the user.'
        example: User
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        description: '[REQUIRED] The role of the user. Admins have full access.'
        example: USER
      username:
        description: '[REQUIRED] The username for the user.'
        example: compsole
        type: string
    type: object
  rest.UserInput:
    description: Used as an input model for creating/updating Users
    properties:
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      role:
        enum:
        - USER
        - ADMIN
        example: USER
        type: string
      user_to_team:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      username:
        example: compsole
        type: string
    required:
    - first_name
    - last_name
    - role
    - username
    type: object
  rest.UserModel:
    description: Used for User endpoints
    properties:
      first_name:
        description: '[OPTIONAL] The display first name for the user.'
        example: Default
        type: string
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      last_name:
        description: '[OPTIONAL] The display last name for the user.'
        example: User
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        description: '[REQUIRED] The role of the user. Admins have full access.'
        example: USER
      user_to_team:
        allOf:
        - $ref: '#/definitions/rest.TeamEdge'
        description: Edges
      username:
        description: '[REQUIRED] The username for the user.'
        example: compsole
        type: string
    type: object
  rest.VmObjectEdge:
    description: Used for VM Object in edges
    properties:
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      identifier:
        description: '[REQUIRED] The identifier of the VM. This will be provider-specific.'
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      ip_addresses:
        description: '[OPTIONAL] IP addresses of the VM. This will be displayed to
          the user.'
        example:
        - 10.0.0.1
        - 100.64.0.1
        items:
          type: string
        type: array
      locked:
        description: '[REQUIRED] (default is false) If a vm is locked, standard users
          will not be able to access this VM.'
        example: false
        type: boolean
      name:
        description: '[REQUIRED] A user-friendly name for the VM. This will be provider-specific.'
        example: team01.dc.comp.co
        type: string
    type: object
  rest.VmObjectIdentifierInput:
    description: Used as an input model for updating VM Object identifiers
    properties:
      identifier:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
    required:
    - identifier
    type: object
  rest.VmObjectInput:
    description: Used as an input model for creating/updating VM Objects
    properties:
      identifier:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      ip_addresses:
        example:
        - 10.0.0.1
        - 100.64.0.1
        items:
          type: string
        type: array
      name:
        example: team01.dc.comp.co
        type: string
      vm_object_to_team:
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
    required:
    - identifier
    - ip_addresses
    - name
    - vm_object_to_team
    type: object
  rest.VmObjectModel:
    description: Used for VM Object endpoints
    properties:
      id:
        description: Fields
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      identifier:
        description: '[REQUIRED] The identifier of the VM. This will be provider-specific.'
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        type: string
      ip_addresses:
        description: '[OPTIONAL] IP addresses of the VM. This will be displayed to
          the user.'
        example:
        - 10.0.0.1
        - 100.64.0.1
        items:
          type: string
        type: array
      locked:
        description: '[REQUIRED] (default is false) If a vm is locked, standard users
          will not be able to access this VM.'
        example: false
        type: boolean
      name:
        description: '[REQUIRED] A user-friendly name for the VM. This will be provider-specific.'
        example: team01.dc.comp.co
        type: string
      vm_object_to_team:
        allOf:
        - $ref: '#/definitions/rest.TeamEdge'
        description: Edges
    type: object
  user.Role:
    enum:
    - USER
    - ADMIN
    type: string
    x-enum-varnames:
    - RoleUSER
    - RoleADMIN
info:
  contact:
    name: BradHacker
    url: http://github.com/BradHacker/compsole/issues
  description: |
    This is the Compsole API documentation.

    ### Authenticating

    There are two methods of authenticating to the Compsole API. **Basic Auth** is used solely for the purpose of the Compsole UI. **Api Key Auth** is used for service accounts to authenticate prior to accessing the REST endpoints.

    #### Basic Auth

    Use the [`/auth/local/login`](#operations-Auth_API-post_auth_local_login) endpoint below to authenticate from the Compsole UI.

    #### Api Key Auth

    API Key Authentication is more complicated.

    1. You must retreive your `api_key` and `api_secret` from the Compsole UI after creating a service account.
    2. Use the [`/rest/token`](#operations-Auth_API-post_rest_login) endpoint to retrieve an API Token to use in requests
    3. Place the API Token into the `Authorization` header like so: `Authorization: Bearer <api token here...>`

    ##### Refresh Tokens

    Refresh tokens can be used to renew a session without re-authenticating. The refresh token should be set in the `refresh-token` cookie already, so you can simply make a `POST` request to `/rest/token/refresh` and receive a new API token from this endpoint.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Compsole API
  version: "1.0"
paths:
  /auth/local/login:
    post:
      consumes:
      - application/json
      - multipart/form-data
      description: Login with a local account
      parameters:
      - description: User account details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/auth.UserLoginVals'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Cookie:
              description: '`auth-cookie` contains the session token'
              type: string
          schema:
            $ref: '#/definitions/auth.UserModel'
      summary: Login with a local account
      tags:
      - Auth API
  /rest/competition:
    get:
      description: List all Competitions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rest.CompetitionModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: List all Competitions
      tags:
      - Service API
    post:
      description: Create a Competition
      parameters:
      - description: The competition to create
        in: body
        name: competition
        required: true
        schema:
          $ref: '#/definitions/rest.CompetitionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.CompetitionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Create a Competition
      tags:
      - Service API
  /rest/competition/{id}:
    delete:
      description: Delete a Competition
      parameters:
      - description: The id of the competition
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Delete a Competition
      tags:
      - Service API
    get:
      description: Get a Competition
      parameters:
      - description: The id of the competition
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CompetitionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Get a Competition
      tags:
      - Service API
    put:
      description: Update a Competition
      parameters:
      - description: The id of the competition
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated competition
        in: body
        name: competition
        required: true
        schema:
          $ref: '#/definitions/rest.CompetitionInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.CompetitionModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update a Competition
      tags:
      - Service API
  /rest/provider:
    get:
      description: List all Providers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rest.ProviderModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: List all Providers
      tags:
      - Service API
    post:
      description: Create a Provider
      parameters:
      - description: The provider to create
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/rest.ProviderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.ProviderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Create a Provider
      tags:
      - Service API
  /rest/provider/{id}:
    delete:
      description: Delete a Provider
      parameters:
      - description: The id of the provider
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Delete a Provider
      tags:
      - Service API
    get:
      description: Get a provider
      parameters:
      - description: The id of the provider
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.ProviderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Get a provider
      tags:
      - Service API
    put:
      description: Update a Provider
      parameters:
      - description: The id of the provider
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated provider
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/rest.ProviderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.ProviderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update a Provider
      tags:
      - Service API
  /rest/team:
    get:
      description: List all Teams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rest.TeamModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: List all Teams
      tags:
      - Service API
    post:
      description: Create a Team
      parameters:
      - description: The team to create
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/rest.TeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.TeamModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Create a Team
      tags:
      - Service API
  /rest/team/{id}:
    delete:
      description: Delete a Team
      parameters:
      - description: The id of the team
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Delete a Team
      tags:
      - Service API
    get:
      description: Get a Team
      parameters:
      - description: The id of the team
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.TeamModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Get a Team
      tags:
      - Service API
    put:
      description: Update a Team
      parameters:
      - description: The id of the team
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated team
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/rest.TeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.TeamModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update a Team
      tags:
      - Service API
  /rest/token:
    post:
      consumes:
      - application/json
      - multipart/form-data
      description: Login with a service account and get a session token. The refresh
        token is set as a cookie in the response and can be used to refresh a session
        without re-authenticating.
      parameters:
      - description: Service account details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/rest.ServiceLoginVals'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.ServiceLoginResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Login with a service account and get a session token
      tags:
      - Auth API
  /rest/token/refresh:
    post:
      description: Refresh a service account session without re-authenticating
      parameters:
      - default: refresh-token=xxx
        description: refresh-token
        in: header
        name: Cookie
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.ServiceLoginResult'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Refresh a service account session without re-authenticating
      tags:
      - Auth API
  /rest/user:
    get:
      description: List all Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rest.UserModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: List all Users
      tags:
      - Service API
    post:
      description: Create a User
      parameters:
      - description: The user to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.UserModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Create a User
      tags:
      - Service API
  /rest/user/{id}:
    delete:
      description: Delete a User
      parameters:
      - description: The id of the user
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Delete a User
      tags:
      - Service API
    get:
      description: Get a User
      parameters:
      - description: The id of the user
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.UserModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Get a User
      tags:
      - Service API
    put:
      description: Update a User
      parameters:
      - description: The id of the user
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/rest.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.UserModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update a User
      tags:
      - Service API
  /rest/vm-object:
    get:
      description: List all VM Objects
      parameters:
      - description: field to search by
        enum:
        - identifier
        - name
        in: query
        name: field
        type: string
      - description: search text
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rest.VmObjectModel'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: List all VM Objects
      tags:
      - Service API
    post:
      description: Create a VM Object
      parameters:
      - description: The vm object to create
        in: body
        name: vm_object
        required: true
        schema:
          $ref: '#/definitions/rest.VmObjectInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.VmObjectModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Create a VM Object
      tags:
      - Service API
  /rest/vm-object/{id}:
    delete:
      description: Delete a VM Object
      parameters:
      - description: The id of the vm object
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Delete a VM Object
      tags:
      - Service API
    get:
      description: Get a VM Object
      parameters:
      - description: The id of the vm object
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.VmObjectModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Get a VM Object
      tags:
      - Service API
    put:
      description: Update a VM Object
      parameters:
      - description: The id of the vm object
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated vm object
        in: body
        name: vm_object
        required: true
        schema:
          $ref: '#/definitions/rest.VmObjectInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.VmObjectModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update a VM Object
      tags:
      - Service API
  /rest/vm-object/{id}/identifier:
    put:
      description: Update the Identifier of a VM Object
      parameters:
      - description: The id of the vm object
        example: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: The updated vm object identifier
        in: body
        name: identifier
        required: true
        schema:
          $ref: '#/definitions/rest.VmObjectIdentifierInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.VmObjectModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.APIError'
      security:
      - ServiceAuth: []
      summary: Update the Identifier of a VM Object
      tags:
      - Service API
securityDefinitions:
  ServiceAuth:
    in: header
    name: Authorization
    type: apiKey
  UserAuth:
    type: basic
swagger: "2.0"
tags:
- description: These endpoints are used purely for authentication purposes only
  name: Auth API
- description: These endpoints are only usable after authenticating with a service
    account. They are used for 3rd-party applications to interact with Compsole.
  name: Service API
