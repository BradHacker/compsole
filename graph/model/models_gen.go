// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ConsoleType string

const (
	ConsoleTypeNovnc  ConsoleType = "NOVNC"
	ConsoleTypeSpice  ConsoleType = "SPICE"
	ConsoleTypeRdp    ConsoleType = "RDP"
	ConsoleTypeSerial ConsoleType = "SERIAL"
	ConsoleTypeMks    ConsoleType = "MKS"
)

var AllConsoleType = []ConsoleType{
	ConsoleTypeNovnc,
	ConsoleTypeSpice,
	ConsoleTypeRdp,
	ConsoleTypeSerial,
	ConsoleTypeMks,
}

func (e ConsoleType) IsValid() bool {
	switch e {
	case ConsoleTypeNovnc, ConsoleTypeSpice, ConsoleTypeRdp, ConsoleTypeSerial, ConsoleTypeMks:
		return true
	}
	return false
}

func (e ConsoleType) String() string {
	return string(e)
}

func (e *ConsoleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConsoleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConsoleType", str)
	}
	return nil
}

func (e ConsoleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Provider string

const (
	ProviderLocal     Provider = "LOCAL"
	ProviderGitlab    Provider = "GITLAB"
	ProviderUndefined Provider = "UNDEFINED"
)

var AllProvider = []Provider{
	ProviderLocal,
	ProviderGitlab,
	ProviderUndefined,
}

func (e Provider) IsValid() bool {
	switch e {
	case ProviderLocal, ProviderGitlab, ProviderUndefined:
		return true
	}
	return false
}

func (e Provider) String() string {
	return string(e)
}

func (e *Provider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Provider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}

func (e Provider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser      Role = "USER"
	RoleAdmin     Role = "ADMIN"
	RoleUndefined Role = "UNDEFINED"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
	RoleUndefined,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin, RoleUndefined:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
