// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/BradHacker/compsole/ent"
)

type AccountInput struct {
	FirstName string `json:"FirstName"`
	LastName  string `json:"LastName"`
}

type ActionsResult struct {
	Results      []*ent.Action `json:"results"`
	Offset       int           `json:"offset"`
	Limit        int           `json:"limit"`
	Page         int           `json:"page"`
	TotalPages   int           `json:"totalPages"`
	TotalResults int           `json:"totalResults"`
	Types        []ActionType  `json:"types"`
}

type CompetitionInput struct {
	ID                    *string `json:"ID"`
	Name                  string  `json:"Name"`
	CompetitionToProvider string  `json:"CompetitionToProvider"`
}

type CompetitionUser struct {
	ID         string    `json:"ID"`
	Username   string    `json:"Username"`
	Password   string    `json:"Password"`
	UserToTeam *ent.Team `json:"UserToTeam"`
}

type PowerStateUpdate struct {
	ID    string     `json:"ID"`
	State PowerState `json:"State"`
}

type ProviderInput struct {
	ID     *string `json:"ID"`
	Name   string  `json:"Name"`
	Type   string  `json:"Type"`
	Config string  `json:"Config"`
}

type ServiceAccountDetails struct {
	ID          string `json:"ID"`
	DisplayName string `json:"DisplayName"`
	APIKey      string `json:"ApiKey"`
	APISecret   string `json:"ApiSecret"`
	Active      bool   `json:"Active"`
}

type ServiceAccountInput struct {
	ID          *string `json:"ID"`
	DisplayName string  `json:"DisplayName"`
	Active      bool    `json:"Active"`
}

type SkeletonVMObject struct {
	Name        string   `json:"Name"`
	Identifier  string   `json:"Identifier"`
	IPAddresses []string `json:"IPAddresses"`
}

type TeamInput struct {
	ID                *string `json:"ID"`
	TeamNumber        int     `json:"TeamNumber"`
	Name              *string `json:"Name"`
	TeamToCompetition string  `json:"TeamToCompetition"`
}

type UserInput struct {
	ID         *string      `json:"ID"`
	Username   string       `json:"Username"`
	FirstName  string       `json:"FirstName"`
	LastName   string       `json:"LastName"`
	Role       Role         `json:"Role"`
	Provider   AuthProvider `json:"Provider"`
	UserToTeam *string      `json:"UserToTeam"`
	// Value will be ignore on update operations. Use ChangePassword mutation instead.
	Password string `json:"Password"`
}

type VMObjectInput struct {
	ID             *string  `json:"ID"`
	Name           string   `json:"Name"`
	Identifier     string   `json:"Identifier"`
	IPAddresses    []string `json:"IPAddresses"`
	Locked         *bool    `json:"Locked"`
	VMObjectToTeam *string  `json:"VmObjectToTeam"`
}

type ActionType string

const (
	ActionTypeSignIn             ActionType = "SIGN_IN"
	ActionTypeFailedSignIn       ActionType = "FAILED_SIGN_IN"
	ActionTypeSignOut            ActionType = "SIGN_OUT"
	ActionTypeAPICall            ActionType = "API_CALL"
	ActionTypeConsoleAccess      ActionType = "CONSOLE_ACCESS"
	ActionTypeReboot             ActionType = "REBOOT"
	ActionTypeShutdown           ActionType = "SHUTDOWN"
	ActionTypePowerOn            ActionType = "POWER_ON"
	ActionTypePowerOff           ActionType = "POWER_OFF"
	ActionTypeChangeSelfPassword ActionType = "CHANGE_SELF_PASSWORD"
	ActionTypeChangePassword     ActionType = "CHANGE_PASSWORD"
	ActionTypeCreateObject       ActionType = "CREATE_OBJECT"
	ActionTypeUpdateObject       ActionType = "UPDATE_OBJECT"
	ActionTypeDeleteObject       ActionType = "DELETE_OBJECT"
	ActionTypeUpdateLockout      ActionType = "UPDATE_LOCKOUT"
	ActionTypeUndefined          ActionType = "UNDEFINED"
)

var AllActionType = []ActionType{
	ActionTypeSignIn,
	ActionTypeFailedSignIn,
	ActionTypeSignOut,
	ActionTypeAPICall,
	ActionTypeConsoleAccess,
	ActionTypeReboot,
	ActionTypeShutdown,
	ActionTypePowerOn,
	ActionTypePowerOff,
	ActionTypeChangeSelfPassword,
	ActionTypeChangePassword,
	ActionTypeCreateObject,
	ActionTypeUpdateObject,
	ActionTypeDeleteObject,
	ActionTypeUpdateLockout,
	ActionTypeUndefined,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeSignIn, ActionTypeFailedSignIn, ActionTypeSignOut, ActionTypeAPICall, ActionTypeConsoleAccess, ActionTypeReboot, ActionTypeShutdown, ActionTypePowerOn, ActionTypePowerOff, ActionTypeChangeSelfPassword, ActionTypeChangePassword, ActionTypeCreateObject, ActionTypeUpdateObject, ActionTypeDeleteObject, ActionTypeUpdateLockout, ActionTypeUndefined:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthProvider string

const (
	AuthProviderLocal     AuthProvider = "LOCAL"
	AuthProviderGitlab    AuthProvider = "GITLAB"
	AuthProviderUndefined AuthProvider = "UNDEFINED"
)

var AllAuthProvider = []AuthProvider{
	AuthProviderLocal,
	AuthProviderGitlab,
	AuthProviderUndefined,
}

func (e AuthProvider) IsValid() bool {
	switch e {
	case AuthProviderLocal, AuthProviderGitlab, AuthProviderUndefined:
		return true
	}
	return false
}

func (e AuthProvider) String() string {
	return string(e)
}

func (e *AuthProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthProvider", str)
	}
	return nil
}

func (e AuthProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ConsoleType string

const (
	ConsoleTypeNovnc  ConsoleType = "NOVNC"
	ConsoleTypeSpice  ConsoleType = "SPICE"
	ConsoleTypeRdp    ConsoleType = "RDP"
	ConsoleTypeSerial ConsoleType = "SERIAL"
	ConsoleTypeMks    ConsoleType = "MKS"
)

var AllConsoleType = []ConsoleType{
	ConsoleTypeNovnc,
	ConsoleTypeSpice,
	ConsoleTypeRdp,
	ConsoleTypeSerial,
	ConsoleTypeMks,
}

func (e ConsoleType) IsValid() bool {
	switch e {
	case ConsoleTypeNovnc, ConsoleTypeSpice, ConsoleTypeRdp, ConsoleTypeSerial, ConsoleTypeMks:
		return true
	}
	return false
}

func (e ConsoleType) String() string {
	return string(e)
}

func (e *ConsoleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConsoleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConsoleType", str)
	}
	return nil
}

func (e ConsoleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PowerState string

const (
	PowerStatePoweredOn    PowerState = "POWERED_ON"
	PowerStatePoweredOff   PowerState = "POWERED_OFF"
	PowerStateRebooting    PowerState = "REBOOTING"
	PowerStateShuttingDown PowerState = "SHUTTING_DOWN"
	PowerStateSuspended    PowerState = "SUSPENDED"
	PowerStateUnknown      PowerState = "UNKNOWN"
)

var AllPowerState = []PowerState{
	PowerStatePoweredOn,
	PowerStatePoweredOff,
	PowerStateRebooting,
	PowerStateShuttingDown,
	PowerStateSuspended,
	PowerStateUnknown,
}

func (e PowerState) IsValid() bool {
	switch e {
	case PowerStatePoweredOn, PowerStatePoweredOff, PowerStateRebooting, PowerStateShuttingDown, PowerStateSuspended, PowerStateUnknown:
		return true
	}
	return false
}

func (e PowerState) String() string {
	return string(e)
}

func (e *PowerState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PowerState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PowerState", str)
	}
	return nil
}

func (e PowerState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RebootType string

const (
	RebootTypeSoft RebootType = "SOFT"
	RebootTypeHard RebootType = "HARD"
)

var AllRebootType = []RebootType{
	RebootTypeSoft,
	RebootTypeHard,
}

func (e RebootType) IsValid() bool {
	switch e {
	case RebootTypeSoft, RebootTypeHard:
		return true
	}
	return false
}

func (e RebootType) String() string {
	return string(e)
}

func (e *RebootType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RebootType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RebootType", str)
	}
	return nil
}

func (e RebootType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser      Role = "USER"
	RoleAdmin     Role = "ADMIN"
	RoleUndefined Role = "UNDEFINED"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
	RoleUndefined,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin, RoleUndefined:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
