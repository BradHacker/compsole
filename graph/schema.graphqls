scalar Time

type VmObject {
  ID: ID!
  Name: String!
  Identifier: String!
  IPAddresses: [String!]!
  Locked: Boolean
  VmObjectToTeam: Team
}

type SkeletonVmObject {
  Name: String!
  Identifier: String!
  IPAddresses: [String!]!
}

type Team {
  ID: ID!
  TeamNumber: Int!
  Name: String
  TeamToCompetition: Competition!
  TeamToVmObjects: [VmObject]
}

type Competition {
  ID: ID!
  Name: String!
  CompetitionToTeams: [Team]!
  CompetitionToProvider: Provider!
}

type Provider {
  ID: ID!
  Name: String!
  Type: String!
  Config: String!
}

enum Role {
  USER
  ADMIN
  UNDEFINED
}

enum AuthProvider {
  LOCAL
  GITLAB
  UNDEFINED
}

type User {
  ID: ID!
  Username: String!
  FirstName: String!
  LastName: String!
  Role: Role!
  Provider: AuthProvider!
  UserToTeam: Team
}

type CompetitionUser {
  ID: ID!
  Username: String!
  Password: String!
  UserToTeam: Team!
}

type Action {
  ID: ID!
  IpAddress: String!
  Type: ActionType!
  Message: String!
  PerformedAt: Time!
  ActionToUser: User
}

type ActionsResult {
  results: [Action]!
  offset: Int!
  limit: Int!
  page: Int!
  totalPages: Int!
  totalResults: Int!
  types: [ActionType!]!
}

type ServiceAccount {
  ID: ID!
  DisplayName: String!
  ApiKey: String!
  Active: Boolean!
}

type ServiceAccountDetails {
  ID: ID!
  DisplayName: String!
  ApiKey: String!
  ApiSecret: String!
  Active: Boolean!
}

enum ActionType {
  SIGN_IN
  FAILED_SIGN_IN
  SIGN_OUT
  API_CALL
  CONSOLE_ACCESS
  REBOOT
  SHUTDOWN
  POWER_ON
  POWER_OFF
  CHANGE_SELF_PASSWORD
  CHANGE_PASSWORD
  CREATE_OBJECT
  UPDATE_OBJECT
  DELETE_OBJECT
  UPDATE_LOCKOUT
  UNDEFINED
}

enum ConsoleType {
  # Openstack
  NOVNC
  SPICE
  RDP
  SERIAL
  MKS
}

directive @hasRole(roles: [Role!]!) on FIELD_DEFINITION

type Query {
  # Shared actions
  console(vmObjectId: ID!, consoleType: ConsoleType!): String! @hasRole(roles: [ADMIN, USER])
  me: User! @hasRole(roles: [ADMIN, USER])
  vmObject(vmObjectId: ID!): VmObject! @hasRole(roles: [ADMIN, USER])
  # User actions
  myVmObjects: [VmObject!]! @hasRole(roles: [USER])
  myTeam: Team! @hasRole(roles: [USER])
  myCompetition: Competition! @hasRole(roles: [USER])
  # Admin actions
  #   Users
  users: [User!]! @hasRole(roles: [ADMIN])
  getUser(id: ID!): User! @hasRole(roles: [ADMIN])
  #   VMObjects
  vmObjects: [VmObject!]! @hasRole(roles: [ADMIN])
  getVmObject(id: ID!): VmObject! @hasRole(roles: [ADMIN])
  #   Teams
  teams: [Team!]! @hasRole(roles: [ADMIN])
  getTeam(id: ID!): Team! @hasRole(roles: [ADMIN])
  #   Competitions
  competitions: [Competition!]! @hasRole(roles: [ADMIN])
  getCompetition(id: ID!): Competition! @hasRole(roles: [ADMIN])
  #   Providers
  providers: [Provider!]! @hasRole(roles: [ADMIN])
  getProvider(id: ID!): Provider! @hasRole(roles: [ADMIN])
  validateConfig(type: String!, config: String!): Boolean! @hasRole(roles: [ADMIN])
  listProviderVms(id: ID!): [SkeletonVmObject!]! @hasRole(roles: [ADMIN])
  #   Service Accounts
  serviceAccounts: [ServiceAccount!]! @hasRole(roles: [ADMIN])
  getServiceAccount(id: ID!): ServiceAccount! @hasRole(roles: [ADMIN])
  # Logging
  actions(offset: Int!, limit: Int!, types: [ActionType!]!): ActionsResult! @hasRole(roles: [ADMIN])
}

enum RebootType {
  SOFT
  HARD
}

input UserInput {
  ID: ID
  Username: String!
  FirstName: String!
  LastName: String!
  Role: Role!
  Provider: AuthProvider!
  UserToTeam: ID
}

input AccountInput {
  FirstName: String!
  LastName: String!
}

input VmObjectInput {
  ID: ID
  Name: String!
  Identifier: String!
  IPAddresses: [String!]!
  Locked: Boolean
  VmObjectToTeam: ID
}

input TeamInput {
  ID: ID
  TeamNumber: Int!
  Name: String
  TeamToCompetition: ID!
}

input CompetitionInput {
  ID: ID
  Name: String!
  CompetitionToProvider: ID!
}

input ProviderInput {
  ID: ID
  Name: String!
  Type: String!
  Config: String!
}

input ServiceAccountInput {
  ID: ID
  DisplayName: String!
  Active: Boolean!
}

type Mutation {
  # Shared actions
  reboot(vmObjectId: ID!, rebootType: RebootType!): Boolean! @hasRole(roles: [ADMIN, USER])
  powerOn(vmObjectId: ID!): Boolean! @hasRole(roles: [ADMIN, USER])
  powerOff(vmObjectId: ID!): Boolean! @hasRole(roles: [ADMIN, USER])
  updateAccount(input: AccountInput!): User! @hasRole(roles: [ADMIN, USER])
  changeSelfPassword(password: String!): Boolean! @hasRole(roles: [ADMIN, USER])
  # Admin actions
  #   Users
  createUser(input: UserInput!): User! @hasRole(roles: [ADMIN])
  updateUser(input: UserInput!): User! @hasRole(roles: [ADMIN])
  deleteUser(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  changePassword(id: ID!, password: String!): Boolean! @hasRole(roles: [ADMIN])
  generateCompetitionUsers(competitionId: ID!, usersPerTeam: Int!): [CompetitionUser!]! @hasRole(roles: [ADMIN])
  #   Teams
  createTeam(input: TeamInput!): Team! @hasRole(roles: [ADMIN])
  batchCreateTeams(input: [TeamInput!]!): [Team!]! @hasRole(roles: [ADMIN])
  updateTeam(input: TeamInput!): Team! @hasRole(roles: [ADMIN])
  deleteTeam(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  #   Competitions
  createCompetition(input: CompetitionInput!): Competition! @hasRole(roles: [ADMIN])
  updateCompetition(input: CompetitionInput!): Competition! @hasRole(roles: [ADMIN])
  deleteCompetition(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  #   VMObjects
  createVmObject(input: VmObjectInput!): VmObject! @hasRole(roles: [ADMIN])
  batchCreateVmObjects(input: [VmObjectInput!]!): [VmObject!]! @hasRole(roles: [ADMIN])
  updateVmObject(input: VmObjectInput!): VmObject! @hasRole(roles: [ADMIN])
  deleteVmObject(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  #   Providers
  createProvider(input: ProviderInput!): Provider! @hasRole(roles: [ADMIN])
  updateProvider(input: ProviderInput!): Provider! @hasRole(roles: [ADMIN])
  deleteProvider(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  #   Service Accounts
  createServiceAccount(input: ServiceAccountInput!): ServiceAccountDetails! @hasRole(roles: [ADMIN])
  updateServiceAccount(input: ServiceAccountInput!): ServiceAccount! @hasRole(roles: [ADMIN])
  deleteServiceAccount(id: ID!): Boolean! @hasRole(roles: [ADMIN])
  # Lockout
  lockoutVm(id: ID!, locked: Boolean!): Boolean! @hasRole(roles: [ADMIN])
  batchLockout(vmObjects: [ID!]!, locked: Boolean!): Boolean! @hasRole(roles: [ADMIN])
  lockoutCompetition(id: ID!, locked: Boolean!): Boolean! @hasRole(roles: [ADMIN])
}

type Subscription {
  lockout(id: ID!): VmObject! @hasRole(roles: [ADMIN, USER])
}
