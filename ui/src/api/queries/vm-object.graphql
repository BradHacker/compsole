fragment VmObjectFragment on VmObject {
  ID
  Identifier
  Name
  IPAddresses
  Locked
  VmObjectToTeam {
    ID
    TeamNumber
    Name
    TeamToCompetition {
      ID
      Name
    }
  }
}

query MyVmObjects {
  myVmObjects {
    ...VmObjectFragment
  }
}

query AllVmObjects {
  vmObjects {
    ...VmObjectFragment
  }
}

query GetVmObject($vmObjectId: ID!) {
  vmObject(vmObjectId: $vmObjectId) {
    ...VmObjectFragment
  }
}

query GetVmConsole($vmObjectId: ID!, $consoleType: ConsoleType!) {
  console(vmObjectId: $vmObjectId, consoleType: $consoleType)
}

query GetVmPowerState($vmObjectId: ID!) {
  powerState(vmObjectId: $vmObjectId)
}

mutation RebootVm($vmObjectId: ID!, $rebootType: RebootType!) {
  reboot(vmObjectId: $vmObjectId, rebootType: $rebootType)
}

mutation PowerOnVm($vmObjectId: ID!) {
  powerOn(vmObjectId: $vmObjectId)
}

mutation PowerOffVm($vmObjectId: ID!) {
  powerOff(vmObjectId: $vmObjectId)
}

mutation UpdateVmObject($vmObject: VmObjectInput!) {
  updateVmObject(input: $vmObject) {
    ...VmObjectFragment
  }
}

mutation CreateVmObject($vmObject: VmObjectInput!) {
  createVmObject(input: $vmObject) {
    ...VmObjectFragment
  }
}

mutation BatchCreateVmObjects($vmObjects: [VmObjectInput!]!) {
  batchCreateVmObjects(input: $vmObjects) {
    ...VmObjectFragment
  }
}

mutation LockoutVm($vmObjectId: ID!, $locked: Boolean!) {
  lockoutVm(id: $vmObjectId, locked: $locked)
}

subscription Lockout($vmObjectId: ID!) {
  lockout(id: $vmObjectId) {
    ...VmObjectFragment
  }
}

subscription PowerState($vmObjectId: ID!) {
  powerState(id: $vmObjectId) {
    ID
    State
  }
}

mutation DeleteVmObject($vmObjectId: ID!) {
  deleteVmObject(id: $vmObjectId)
}

mutation BatchLockout($vmObjects: [ID!]!, $locked: Boolean!) {
  batchLockout(vmObjects: $vmObjects, locked: $locked)
}
