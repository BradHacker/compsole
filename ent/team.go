// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/compsole/ent/competition"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/google/uuid"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TeamNumber holds the value of the "team_number" field.
	TeamNumber int `json:"team_number,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges                    TeamEdges `json:"edges"`
	team_team_to_competition *uuid.UUID
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// TeamToCompetition holds the value of the TeamToCompetition edge.
	TeamToCompetition *Competition `json:"TeamToCompetition,omitempty"`
	// TeamToVmObjects holds the value of the TeamToVmObjects edge.
	TeamToVmObjects []*VmObject `json:"TeamToVmObjects,omitempty"`
	// TeamToUsers holds the value of the TeamToUsers edge.
	TeamToUsers []*User `json:"TeamToUsers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TeamToCompetitionOrErr returns the TeamToCompetition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) TeamToCompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[0] {
		if e.TeamToCompetition == nil {
			// The edge TeamToCompetition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.TeamToCompetition, nil
	}
	return nil, &NotLoadedError{edge: "TeamToCompetition"}
}

// TeamToVmObjectsOrErr returns the TeamToVmObjects value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToVmObjectsOrErr() ([]*VmObject, error) {
	if e.loadedTypes[1] {
		return e.TeamToVmObjects, nil
	}
	return nil, &NotLoadedError{edge: "TeamToVmObjects"}
}

// TeamToUsersOrErr returns the TeamToUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToUsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.TeamToUsers, nil
	}
	return nil, &NotLoadedError{edge: "TeamToUsers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldTeamNumber:
			values[i] = new(sql.NullInt64)
		case team.FieldName:
			values[i] = new(sql.NullString)
		case team.FieldID:
			values[i] = new(uuid.UUID)
		case team.ForeignKeys[0]: // team_team_to_competition
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Team", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case team.FieldTeamNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field team_number", values[i])
			} else if value.Valid {
				t.TeamNumber = int(value.Int64)
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case team.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field team_team_to_competition", values[i])
			} else if value.Valid {
				t.team_team_to_competition = new(uuid.UUID)
				*t.team_team_to_competition = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTeamToCompetition queries the "TeamToCompetition" edge of the Team entity.
func (t *Team) QueryTeamToCompetition() *CompetitionQuery {
	return (&TeamClient{config: t.config}).QueryTeamToCompetition(t)
}

// QueryTeamToVmObjects queries the "TeamToVmObjects" edge of the Team entity.
func (t *Team) QueryTeamToVmObjects() *VmObjectQuery {
	return (&TeamClient{config: t.config}).QueryTeamToVmObjects(t)
}

// QueryTeamToUsers queries the "TeamToUsers" edge of the Team entity.
func (t *Team) QueryTeamToUsers() *UserQuery {
	return (&TeamClient{config: t.config}).QueryTeamToUsers(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return (&TeamClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", team_number=")
	builder.WriteString(fmt.Sprintf("%v", t.TeamNumber))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team

func (t Teams) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
