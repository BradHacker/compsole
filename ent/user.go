// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/BradHacker/compsole/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	// [REQUIRED] The username for the user.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	// [REQUIRED] The hashed password for the user.
	Password string `json:"-"`
	// FirstName holds the value of the "first_name" field.
	// [OPTIONAL] The display first name for the user.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	// [OPTIONAL] The display last name for the user
	LastName string `json:"last_name,omitempty"`
	// Role holds the value of the "role" field.
	// [REQUIRED] The role of the user. Admins have full access.
	Role user.Role `json:"role,omitempty"`
	// Provider holds the value of the "provider" field.
	// [REQUIRED] The type of login the user will be using.
	Provider user.Provider `json:"provider,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges              UserEdges `json:"edges"`
	team_team_to_users *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserToTeam holds the value of the UserToTeam edge.
	UserToTeam *Team `json:"UserToTeam,omitempty"`
	// UserToToken holds the value of the UserToToken edge.
	UserToToken []*Token `json:"UserToToken,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserToTeamOrErr returns the UserToTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserToTeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.UserToTeam == nil {
			// The edge UserToTeam was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.UserToTeam, nil
	}
	return nil, &NotLoadedError{edge: "UserToTeam"}
}

// UserToTokenOrErr returns the UserToToken value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserToTokenOrErr() ([]*Token, error) {
	if e.loadedTypes[1] {
		return e.UserToToken, nil
	}
	return nil, &NotLoadedError{edge: "UserToToken"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldUsername, user.FieldPassword, user.FieldFirstName, user.FieldLastName, user.FieldRole, user.FieldProvider:
			values[i] = new(sql.NullString)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // team_team_to_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = user.Role(value.String)
			}
		case user.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				u.Provider = user.Provider(value.String)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field team_team_to_users", values[i])
			} else if value.Valid {
				u.team_team_to_users = new(uuid.UUID)
				*u.team_team_to_users = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUserToTeam queries the "UserToTeam" edge of the User entity.
func (u *User) QueryUserToTeam() *TeamQuery {
	return (&UserClient{config: u.config}).QueryUserToTeam(u)
}

// QueryUserToToken queries the "UserToToken" edge of the User entity.
func (u *User) QueryUserToToken() *TokenQuery {
	return (&UserClient{config: u.config}).QueryUserToToken(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", provider=")
	builder.WriteString(fmt.Sprintf("%v", u.Provider))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
