// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/compsole/ent/predicate"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/BradHacker/compsole/ent/vmobject"
	"github.com/google/uuid"
)

// VmObjectQuery is the builder for querying VmObject entities.
type VmObjectQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.VmObject
	// eager-loading edges.
	withVmObjectToTeam *TeamQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VmObjectQuery builder.
func (voq *VmObjectQuery) Where(ps ...predicate.VmObject) *VmObjectQuery {
	voq.predicates = append(voq.predicates, ps...)
	return voq
}

// Limit adds a limit step to the query.
func (voq *VmObjectQuery) Limit(limit int) *VmObjectQuery {
	voq.limit = &limit
	return voq
}

// Offset adds an offset step to the query.
func (voq *VmObjectQuery) Offset(offset int) *VmObjectQuery {
	voq.offset = &offset
	return voq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (voq *VmObjectQuery) Unique(unique bool) *VmObjectQuery {
	voq.unique = &unique
	return voq
}

// Order adds an order step to the query.
func (voq *VmObjectQuery) Order(o ...OrderFunc) *VmObjectQuery {
	voq.order = append(voq.order, o...)
	return voq
}

// QueryVmObjectToTeam chains the current query on the "VmObjectToTeam" edge.
func (voq *VmObjectQuery) QueryVmObjectToTeam() *TeamQuery {
	query := &TeamQuery{config: voq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := voq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := voq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(vmobject.Table, vmobject.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, vmobject.VmObjectToTeamTable, vmobject.VmObjectToTeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(voq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VmObject entity from the query.
// Returns a *NotFoundError when no VmObject was found.
func (voq *VmObjectQuery) First(ctx context.Context) (*VmObject, error) {
	nodes, err := voq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{vmobject.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (voq *VmObjectQuery) FirstX(ctx context.Context) *VmObject {
	node, err := voq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VmObject ID from the query.
// Returns a *NotFoundError when no VmObject ID was found.
func (voq *VmObjectQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = voq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{vmobject.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (voq *VmObjectQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := voq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VmObject entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VmObject entity is found.
// Returns a *NotFoundError when no VmObject entities are found.
func (voq *VmObjectQuery) Only(ctx context.Context) (*VmObject, error) {
	nodes, err := voq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{vmobject.Label}
	default:
		return nil, &NotSingularError{vmobject.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (voq *VmObjectQuery) OnlyX(ctx context.Context) *VmObject {
	node, err := voq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VmObject ID in the query.
// Returns a *NotSingularError when more than one VmObject ID is found.
// Returns a *NotFoundError when no entities are found.
func (voq *VmObjectQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = voq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = &NotSingularError{vmobject.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (voq *VmObjectQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := voq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VmObjects.
func (voq *VmObjectQuery) All(ctx context.Context) ([]*VmObject, error) {
	if err := voq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return voq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (voq *VmObjectQuery) AllX(ctx context.Context) []*VmObject {
	nodes, err := voq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VmObject IDs.
func (voq *VmObjectQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := voq.Select(vmobject.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (voq *VmObjectQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := voq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (voq *VmObjectQuery) Count(ctx context.Context) (int, error) {
	if err := voq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return voq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (voq *VmObjectQuery) CountX(ctx context.Context) int {
	count, err := voq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (voq *VmObjectQuery) Exist(ctx context.Context) (bool, error) {
	if err := voq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return voq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (voq *VmObjectQuery) ExistX(ctx context.Context) bool {
	exist, err := voq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VmObjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (voq *VmObjectQuery) Clone() *VmObjectQuery {
	if voq == nil {
		return nil
	}
	return &VmObjectQuery{
		config:             voq.config,
		limit:              voq.limit,
		offset:             voq.offset,
		order:              append([]OrderFunc{}, voq.order...),
		predicates:         append([]predicate.VmObject{}, voq.predicates...),
		withVmObjectToTeam: voq.withVmObjectToTeam.Clone(),
		// clone intermediate query.
		sql:    voq.sql.Clone(),
		path:   voq.path,
		unique: voq.unique,
	}
}

// WithVmObjectToTeam tells the query-builder to eager-load the nodes that are connected to
// the "VmObjectToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (voq *VmObjectQuery) WithVmObjectToTeam(opts ...func(*TeamQuery)) *VmObjectQuery {
	query := &TeamQuery{config: voq.config}
	for _, opt := range opts {
		opt(query)
	}
	voq.withVmObjectToTeam = query
	return voq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VmObject.Query().
//		GroupBy(vmobject.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (voq *VmObjectQuery) GroupBy(field string, fields ...string) *VmObjectGroupBy {
	group := &VmObjectGroupBy{config: voq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := voq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return voq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.VmObject.Query().
//		Select(vmobject.FieldName).
//		Scan(ctx, &v)
func (voq *VmObjectQuery) Select(fields ...string) *VmObjectSelect {
	voq.fields = append(voq.fields, fields...)
	return &VmObjectSelect{VmObjectQuery: voq}
}

func (voq *VmObjectQuery) prepareQuery(ctx context.Context) error {
	for _, f := range voq.fields {
		if !vmobject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if voq.path != nil {
		prev, err := voq.path(ctx)
		if err != nil {
			return err
		}
		voq.sql = prev
	}
	return nil
}

func (voq *VmObjectQuery) sqlAll(ctx context.Context) ([]*VmObject, error) {
	var (
		nodes       = []*VmObject{}
		withFKs     = voq.withFKs
		_spec       = voq.querySpec()
		loadedTypes = [1]bool{
			voq.withVmObjectToTeam != nil,
		}
	)
	if voq.withVmObjectToTeam != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, vmobject.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &VmObject{config: voq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, voq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := voq.withVmObjectToTeam; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*VmObject)
		for i := range nodes {
			if nodes[i].team_team_to_vm_objects == nil {
				continue
			}
			fk := *nodes[i].team_team_to_vm_objects
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(team.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "team_team_to_vm_objects" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.VmObjectToTeam = n
			}
		}
	}

	return nodes, nil
}

func (voq *VmObjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := voq.querySpec()
	_spec.Node.Columns = voq.fields
	if len(voq.fields) > 0 {
		_spec.Unique = voq.unique != nil && *voq.unique
	}
	return sqlgraph.CountNodes(ctx, voq.driver, _spec)
}

func (voq *VmObjectQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := voq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (voq *VmObjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vmobject.Table,
			Columns: vmobject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vmobject.FieldID,
			},
		},
		From:   voq.sql,
		Unique: true,
	}
	if unique := voq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := voq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vmobject.FieldID)
		for i := range fields {
			if fields[i] != vmobject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := voq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := voq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := voq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := voq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (voq *VmObjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(voq.driver.Dialect())
	t1 := builder.Table(vmobject.Table)
	columns := voq.fields
	if len(columns) == 0 {
		columns = vmobject.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if voq.sql != nil {
		selector = voq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if voq.unique != nil && *voq.unique {
		selector.Distinct()
	}
	for _, p := range voq.predicates {
		p(selector)
	}
	for _, p := range voq.order {
		p(selector)
	}
	if offset := voq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := voq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VmObjectGroupBy is the group-by builder for VmObject entities.
type VmObjectGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vogb *VmObjectGroupBy) Aggregate(fns ...AggregateFunc) *VmObjectGroupBy {
	vogb.fns = append(vogb.fns, fns...)
	return vogb
}

// Scan applies the group-by query and scans the result into the given value.
func (vogb *VmObjectGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := vogb.path(ctx)
	if err != nil {
		return err
	}
	vogb.sql = query
	return vogb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vogb *VmObjectGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := vogb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(vogb.fields) > 1 {
		return nil, errors.New("ent: VmObjectGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := vogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vogb *VmObjectGroupBy) StringsX(ctx context.Context) []string {
	v, err := vogb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vogb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vogb *VmObjectGroupBy) StringX(ctx context.Context) string {
	v, err := vogb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(vogb.fields) > 1 {
		return nil, errors.New("ent: VmObjectGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := vogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vogb *VmObjectGroupBy) IntsX(ctx context.Context) []int {
	v, err := vogb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vogb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vogb *VmObjectGroupBy) IntX(ctx context.Context) int {
	v, err := vogb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(vogb.fields) > 1 {
		return nil, errors.New("ent: VmObjectGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := vogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vogb *VmObjectGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := vogb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vogb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vogb *VmObjectGroupBy) Float64X(ctx context.Context) float64 {
	v, err := vogb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(vogb.fields) > 1 {
		return nil, errors.New("ent: VmObjectGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := vogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vogb *VmObjectGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := vogb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (vogb *VmObjectGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vogb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vogb *VmObjectGroupBy) BoolX(ctx context.Context) bool {
	v, err := vogb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vogb *VmObjectGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range vogb.fields {
		if !vmobject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := vogb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (vogb *VmObjectGroupBy) sqlQuery() *sql.Selector {
	selector := vogb.sql.Select()
	aggregation := make([]string, 0, len(vogb.fns))
	for _, fn := range vogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(vogb.fields)+len(vogb.fns))
		for _, f := range vogb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(vogb.fields...)...)
}

// VmObjectSelect is the builder for selecting fields of VmObject entities.
type VmObjectSelect struct {
	*VmObjectQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (vos *VmObjectSelect) Scan(ctx context.Context, v interface{}) error {
	if err := vos.prepareQuery(ctx); err != nil {
		return err
	}
	vos.sql = vos.VmObjectQuery.sqlQuery(ctx)
	return vos.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (vos *VmObjectSelect) ScanX(ctx context.Context, v interface{}) {
	if err := vos.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Strings(ctx context.Context) ([]string, error) {
	if len(vos.fields) > 1 {
		return nil, errors.New("ent: VmObjectSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := vos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (vos *VmObjectSelect) StringsX(ctx context.Context) []string {
	v, err := vos.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = vos.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (vos *VmObjectSelect) StringX(ctx context.Context) string {
	v, err := vos.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Ints(ctx context.Context) ([]int, error) {
	if len(vos.fields) > 1 {
		return nil, errors.New("ent: VmObjectSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := vos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (vos *VmObjectSelect) IntsX(ctx context.Context) []int {
	v, err := vos.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = vos.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (vos *VmObjectSelect) IntX(ctx context.Context) int {
	v, err := vos.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(vos.fields) > 1 {
		return nil, errors.New("ent: VmObjectSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := vos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (vos *VmObjectSelect) Float64sX(ctx context.Context) []float64 {
	v, err := vos.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = vos.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (vos *VmObjectSelect) Float64X(ctx context.Context) float64 {
	v, err := vos.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(vos.fields) > 1 {
		return nil, errors.New("ent: VmObjectSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := vos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (vos *VmObjectSelect) BoolsX(ctx context.Context) []bool {
	v, err := vos.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (vos *VmObjectSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = vos.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{vmobject.Label}
	default:
		err = fmt.Errorf("ent: VmObjectSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (vos *VmObjectSelect) BoolX(ctx context.Context) bool {
	v, err := vos.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (vos *VmObjectSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := vos.sql.Query()
	if err := vos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
