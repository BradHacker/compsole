// Code generated by entc, DO NOT EDIT.

package servicetoken

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the servicetoken type in the database.
	Label = "service_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldIssuedAt holds the string denoting the issued_at field in the database.
	FieldIssuedAt = "issued_at"
	// EdgeTokenToServiceAccount holds the string denoting the tokentoserviceaccount edge name in mutations.
	EdgeTokenToServiceAccount = "TokenToServiceAccount"
	// ServiceAccountFieldID holds the string denoting the ID field of the ServiceAccount.
	ServiceAccountFieldID = "oid"
	// Table holds the table name of the servicetoken in the database.
	Table = "service_tokens"
	// TokenToServiceAccountTable is the table that holds the TokenToServiceAccount relation/edge.
	TokenToServiceAccountTable = "service_tokens"
	// TokenToServiceAccountInverseTable is the table name for the ServiceAccount entity.
	// It exists in this package in order to avoid circular dependency with the "serviceaccount" package.
	TokenToServiceAccountInverseTable = "service_accounts"
	// TokenToServiceAccountColumn is the table column denoting the TokenToServiceAccount relation/edge.
	TokenToServiceAccountColumn = "service_account_service_account_to_token"
)

// Columns holds all SQL columns for servicetoken fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldRefreshToken,
	FieldIssuedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_account_service_account_to_token",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
