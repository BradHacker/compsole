// Code generated by entc, DO NOT EDIT.

package action

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the action type in the database.
	Label = "action"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldPerformedAt holds the string denoting the performed_at field in the database.
	FieldPerformedAt = "performed_at"
	// EdgeActionToUser holds the string denoting the actiontouser edge name in mutations.
	EdgeActionToUser = "ActionToUser"
	// EdgeActionToServiceAccount holds the string denoting the actiontoserviceaccount edge name in mutations.
	EdgeActionToServiceAccount = "ActionToServiceAccount"
	// Table holds the table name of the action in the database.
	Table = "actions"
	// ActionToUserTable is the table that holds the ActionToUser relation/edge.
	ActionToUserTable = "actions"
	// ActionToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ActionToUserInverseTable = "users"
	// ActionToUserColumn is the table column denoting the ActionToUser relation/edge.
	ActionToUserColumn = "user_user_to_actions"
	// ActionToServiceAccountTable is the table that holds the ActionToServiceAccount relation/edge.
	ActionToServiceAccountTable = "actions"
	// ActionToServiceAccountInverseTable is the table name for the ServiceAccount entity.
	// It exists in this package in order to avoid circular dependency with the "serviceaccount" package.
	ActionToServiceAccountInverseTable = "service_accounts"
	// ActionToServiceAccountColumn is the table column denoting the ActionToServiceAccount relation/edge.
	ActionToServiceAccountColumn = "service_account_service_account_to_actions"
)

// Columns holds all SQL columns for action fields.
var Columns = []string{
	FieldID,
	FieldIPAddress,
	FieldType,
	FieldMessage,
	FieldPerformedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "actions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"service_account_service_account_to_actions",
	"user_user_to_actions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIPAddress holds the default value on creation for the "ip_address" field.
	DefaultIPAddress string
	// DefaultPerformedAt holds the default value on creation for the "performed_at" field.
	DefaultPerformedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSIGN_IN              Type = "SIGN_IN"
	TypeFAILED_SIGN_IN       Type = "FAILED_SIGN_IN"
	TypeSIGN_OUT             Type = "SIGN_OUT"
	TypeAPI_CALL             Type = "API_CALL"
	TypeCONSOLE_ACCESS       Type = "CONSOLE_ACCESS"
	TypeREBOOT               Type = "REBOOT"
	TypeSHUTDOWN             Type = "SHUTDOWN"
	TypePOWER_ON             Type = "POWER_ON"
	TypePOWER_OFF            Type = "POWER_OFF"
	TypeCHANGE_SELF_PASSWORD Type = "CHANGE_SELF_PASSWORD"
	TypeCHANGE_PASSWORD      Type = "CHANGE_PASSWORD"
	TypeCREATE_OBJECT        Type = "CREATE_OBJECT"
	TypeUPDATE_OBJECT        Type = "UPDATE_OBJECT"
	TypeDELETE_OBJECT        Type = "DELETE_OBJECT"
	TypeUPDATE_LOCKOUT       Type = "UPDATE_LOCKOUT"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSIGN_IN, TypeFAILED_SIGN_IN, TypeSIGN_OUT, TypeAPI_CALL, TypeCONSOLE_ACCESS, TypeREBOOT, TypeSHUTDOWN, TypePOWER_ON, TypePOWER_OFF, TypeCHANGE_SELF_PASSWORD, TypeCHANGE_PASSWORD, TypeCREATE_OBJECT, TypeUPDATE_OBJECT, TypeDELETE_OBJECT, TypeUPDATE_LOCKOUT:
		return nil
	default:
		return fmt.Errorf("action: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
