// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/compsole/ent/predicate"
	"github.com/BradHacker/compsole/ent/serviceaccount"
	"github.com/BradHacker/compsole/ent/servicetoken"
	"github.com/google/uuid"
)

// ServiceTokenUpdate is the builder for updating ServiceToken entities.
type ServiceTokenUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceTokenMutation
}

// Where appends a list predicates to the ServiceTokenUpdate builder.
func (stu *ServiceTokenUpdate) Where(ps ...predicate.ServiceToken) *ServiceTokenUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetToken sets the "token" field.
func (stu *ServiceTokenUpdate) SetToken(s string) *ServiceTokenUpdate {
	stu.mutation.SetToken(s)
	return stu
}

// SetRefreshToken sets the "refresh_token" field.
func (stu *ServiceTokenUpdate) SetRefreshToken(s string) *ServiceTokenUpdate {
	stu.mutation.SetRefreshToken(s)
	return stu
}

// SetIssuedAt sets the "issued_at" field.
func (stu *ServiceTokenUpdate) SetIssuedAt(i int64) *ServiceTokenUpdate {
	stu.mutation.ResetIssuedAt()
	stu.mutation.SetIssuedAt(i)
	return stu
}

// AddIssuedAt adds i to the "issued_at" field.
func (stu *ServiceTokenUpdate) AddIssuedAt(i int64) *ServiceTokenUpdate {
	stu.mutation.AddIssuedAt(i)
	return stu
}

// SetTokenToServiceAccountID sets the "TokenToServiceAccount" edge to the ServiceAccount entity by ID.
func (stu *ServiceTokenUpdate) SetTokenToServiceAccountID(id uuid.UUID) *ServiceTokenUpdate {
	stu.mutation.SetTokenToServiceAccountID(id)
	return stu
}

// SetTokenToServiceAccount sets the "TokenToServiceAccount" edge to the ServiceAccount entity.
func (stu *ServiceTokenUpdate) SetTokenToServiceAccount(s *ServiceAccount) *ServiceTokenUpdate {
	return stu.SetTokenToServiceAccountID(s.ID)
}

// Mutation returns the ServiceTokenMutation object of the builder.
func (stu *ServiceTokenUpdate) Mutation() *ServiceTokenMutation {
	return stu.mutation
}

// ClearTokenToServiceAccount clears the "TokenToServiceAccount" edge to the ServiceAccount entity.
func (stu *ServiceTokenUpdate) ClearTokenToServiceAccount() *ServiceTokenUpdate {
	stu.mutation.ClearTokenToServiceAccount()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ServiceTokenUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ServiceTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ServiceTokenUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ServiceTokenUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *ServiceTokenUpdate) check() error {
	if _, ok := stu.mutation.TokenToServiceAccountID(); stu.mutation.TokenToServiceAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceToken.TokenToServiceAccount"`)
	}
	return nil
}

func (stu *ServiceTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicetoken.Table,
			Columns: servicetoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servicetoken.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetoken.FieldToken,
		})
	}
	if value, ok := stu.mutation.RefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetoken.FieldRefreshToken,
		})
	}
	if value, ok := stu.mutation.IssuedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicetoken.FieldIssuedAt,
		})
	}
	if value, ok := stu.mutation.AddedIssuedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicetoken.FieldIssuedAt,
		})
	}
	if stu.mutation.TokenToServiceAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetoken.TokenToServiceAccountTable,
			Columns: []string{servicetoken.TokenToServiceAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: serviceaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.TokenToServiceAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetoken.TokenToServiceAccountTable,
			Columns: []string{servicetoken.TokenToServiceAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: serviceaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceTokenUpdateOne is the builder for updating a single ServiceToken entity.
type ServiceTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceTokenMutation
}

// SetToken sets the "token" field.
func (stuo *ServiceTokenUpdateOne) SetToken(s string) *ServiceTokenUpdateOne {
	stuo.mutation.SetToken(s)
	return stuo
}

// SetRefreshToken sets the "refresh_token" field.
func (stuo *ServiceTokenUpdateOne) SetRefreshToken(s string) *ServiceTokenUpdateOne {
	stuo.mutation.SetRefreshToken(s)
	return stuo
}

// SetIssuedAt sets the "issued_at" field.
func (stuo *ServiceTokenUpdateOne) SetIssuedAt(i int64) *ServiceTokenUpdateOne {
	stuo.mutation.ResetIssuedAt()
	stuo.mutation.SetIssuedAt(i)
	return stuo
}

// AddIssuedAt adds i to the "issued_at" field.
func (stuo *ServiceTokenUpdateOne) AddIssuedAt(i int64) *ServiceTokenUpdateOne {
	stuo.mutation.AddIssuedAt(i)
	return stuo
}

// SetTokenToServiceAccountID sets the "TokenToServiceAccount" edge to the ServiceAccount entity by ID.
func (stuo *ServiceTokenUpdateOne) SetTokenToServiceAccountID(id uuid.UUID) *ServiceTokenUpdateOne {
	stuo.mutation.SetTokenToServiceAccountID(id)
	return stuo
}

// SetTokenToServiceAccount sets the "TokenToServiceAccount" edge to the ServiceAccount entity.
func (stuo *ServiceTokenUpdateOne) SetTokenToServiceAccount(s *ServiceAccount) *ServiceTokenUpdateOne {
	return stuo.SetTokenToServiceAccountID(s.ID)
}

// Mutation returns the ServiceTokenMutation object of the builder.
func (stuo *ServiceTokenUpdateOne) Mutation() *ServiceTokenMutation {
	return stuo.mutation
}

// ClearTokenToServiceAccount clears the "TokenToServiceAccount" edge to the ServiceAccount entity.
func (stuo *ServiceTokenUpdateOne) ClearTokenToServiceAccount() *ServiceTokenUpdateOne {
	stuo.mutation.ClearTokenToServiceAccount()
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ServiceTokenUpdateOne) Select(field string, fields ...string) *ServiceTokenUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ServiceToken entity.
func (stuo *ServiceTokenUpdateOne) Save(ctx context.Context) (*ServiceToken, error) {
	var (
		err  error
		node *ServiceToken
	)
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ServiceTokenUpdateOne) SaveX(ctx context.Context) *ServiceToken {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ServiceTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ServiceTokenUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *ServiceTokenUpdateOne) check() error {
	if _, ok := stuo.mutation.TokenToServiceAccountID(); stuo.mutation.TokenToServiceAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ServiceToken.TokenToServiceAccount"`)
	}
	return nil
}

func (stuo *ServiceTokenUpdateOne) sqlSave(ctx context.Context) (_node *ServiceToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   servicetoken.Table,
			Columns: servicetoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servicetoken.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicetoken.FieldID)
		for _, f := range fields {
			if !servicetoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != servicetoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetoken.FieldToken,
		})
	}
	if value, ok := stuo.mutation.RefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: servicetoken.FieldRefreshToken,
		})
	}
	if value, ok := stuo.mutation.IssuedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicetoken.FieldIssuedAt,
		})
	}
	if value, ok := stuo.mutation.AddedIssuedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: servicetoken.FieldIssuedAt,
		})
	}
	if stuo.mutation.TokenToServiceAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetoken.TokenToServiceAccountTable,
			Columns: []string{servicetoken.TokenToServiceAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: serviceaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.TokenToServiceAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicetoken.TokenToServiceAccountTable,
			Columns: []string{servicetoken.TokenToServiceAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: serviceaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceToken{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{servicetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
