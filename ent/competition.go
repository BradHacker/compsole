// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/compsole/ent/competition"
	"github.com/BradHacker/compsole/ent/provider"
	"github.com/google/uuid"
)

// Competition is the model entity for the Competition schema.
type Competition struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	// [REQUIRED] The unique name (aka. slug) for the competition.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompetitionQuery when eager-loading is set.
	Edges                               CompetitionEdges `json:"edges"`
	competition_competition_to_provider *uuid.UUID
}

// CompetitionEdges holds the relations/edges for other nodes in the graph.
type CompetitionEdges struct {
	// CompetitionToTeams holds the value of the CompetitionToTeams edge.
	CompetitionToTeams []*Team `json:"CompetitionToTeams,omitempty"`
	// CompetitionToProvider holds the value of the CompetitionToProvider edge.
	CompetitionToProvider *Provider `json:"CompetitionToProvider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompetitionToTeamsOrErr returns the CompetitionToTeams value or an error if the edge
// was not loaded in eager-loading.
func (e CompetitionEdges) CompetitionToTeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.CompetitionToTeams, nil
	}
	return nil, &NotLoadedError{edge: "CompetitionToTeams"}
}

// CompetitionToProviderOrErr returns the CompetitionToProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompetitionEdges) CompetitionToProviderOrErr() (*Provider, error) {
	if e.loadedTypes[1] {
		if e.CompetitionToProvider == nil {
			// The edge CompetitionToProvider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provider.Label}
		}
		return e.CompetitionToProvider, nil
	}
	return nil, &NotLoadedError{edge: "CompetitionToProvider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Competition) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case competition.FieldName:
			values[i] = new(sql.NullString)
		case competition.FieldID:
			values[i] = new(uuid.UUID)
		case competition.ForeignKeys[0]: // competition_competition_to_provider
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Competition", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Competition fields.
func (c *Competition) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case competition.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case competition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case competition.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field competition_competition_to_provider", values[i])
			} else if value.Valid {
				c.competition_competition_to_provider = new(uuid.UUID)
				*c.competition_competition_to_provider = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryCompetitionToTeams queries the "CompetitionToTeams" edge of the Competition entity.
func (c *Competition) QueryCompetitionToTeams() *TeamQuery {
	return (&CompetitionClient{config: c.config}).QueryCompetitionToTeams(c)
}

// QueryCompetitionToProvider queries the "CompetitionToProvider" edge of the Competition entity.
func (c *Competition) QueryCompetitionToProvider() *ProviderQuery {
	return (&CompetitionClient{config: c.config}).QueryCompetitionToProvider(c)
}

// Update returns a builder for updating this Competition.
// Note that you need to call Competition.Unwrap() before calling this method if this Competition
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Competition) Update() *CompetitionUpdateOne {
	return (&CompetitionClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Competition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Competition) Unwrap() *Competition {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Competition is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Competition) String() string {
	var builder strings.Builder
	builder.WriteString("Competition(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Competitions is a parsable slice of Competition.
type Competitions []*Competition

func (c Competitions) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
