// Code generated by entc, DO NOT EDIT.

package token

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldExpireAt holds the string denoting the expire_at field in the database.
	FieldExpireAt = "expire_at"
	// EdgeTokenToUser holds the string denoting the tokentouser edge name in mutations.
	EdgeTokenToUser = "TokenToUser"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "oid"
	// Table holds the table name of the token in the database.
	Table = "tokens"
	// TokenToUserTable is the table that holds the TokenToUser relation/edge.
	TokenToUserTable = "tokens"
	// TokenToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TokenToUserInverseTable = "users"
	// TokenToUserColumn is the table column denoting the TokenToUser relation/edge.
	TokenToUserColumn = "user_user_to_token"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldExpireAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_to_token",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
