// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/BradHacker/compsole/ent/action"
	"github.com/BradHacker/compsole/ent/competition"
	"github.com/BradHacker/compsole/ent/predicate"
	"github.com/BradHacker/compsole/ent/provider"
	"github.com/BradHacker/compsole/ent/serviceaccount"
	"github.com/BradHacker/compsole/ent/servicetoken"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/BradHacker/compsole/ent/token"
	"github.com/BradHacker/compsole/ent/user"
	"github.com/BradHacker/compsole/ent/vmobject"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAction         = "Action"
	TypeCompetition    = "Competition"
	TypeProvider       = "Provider"
	TypeServiceAccount = "ServiceAccount"
	TypeServiceToken   = "ServiceToken"
	TypeTeam           = "Team"
	TypeToken          = "Token"
	TypeUser           = "User"
	TypeVmObject       = "VmObject"
)

// ActionMutation represents an operation that mutates the Action nodes in the graph.
type ActionMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	ip_address                     *string
	_type                          *action.Type
	message                        *string
	performed_at                   *time.Time
	clearedFields                  map[string]struct{}
	_ActionToUser                  *uuid.UUID
	cleared_ActionToUser           bool
	_ActionToServiceAccount        *uuid.UUID
	cleared_ActionToServiceAccount bool
	done                           bool
	oldValue                       func(context.Context) (*Action, error)
	predicates                     []predicate.Action
}

var _ ent.Mutation = (*ActionMutation)(nil)

// actionOption allows management of the mutation configuration using functional options.
type actionOption func(*ActionMutation)

// newActionMutation creates new mutation for the Action entity.
func newActionMutation(c config, op Op, opts ...actionOption) *ActionMutation {
	m := &ActionMutation{
		config:        c,
		op:            op,
		typ:           TypeAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActionID sets the ID field of the mutation.
func withActionID(id uuid.UUID) actionOption {
	return func(m *ActionMutation) {
		var (
			err   error
			once  sync.Once
			value *Action
		)
		m.oldValue = func(ctx context.Context) (*Action, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Action.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAction sets the old Action of the mutation.
func withAction(node *Action) actionOption {
	return func(m *ActionMutation) {
		m.oldValue = func(context.Context) (*Action, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Action entities.
func (m *ActionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Action.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddress sets the "ip_address" field.
func (m *ActionMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *ActionMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the Action entity.
// If the Action object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *ActionMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetType sets the "type" field.
func (m *ActionMutation) SetType(a action.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *ActionMutation) GetType() (r action.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Action entity.
// If the Action object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionMutation) OldType(ctx context.Context) (v action.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ActionMutation) ResetType() {
	m._type = nil
}

// SetMessage sets the "message" field.
func (m *ActionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ActionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Action entity.
// If the Action object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *ActionMutation) ResetMessage() {
	m.message = nil
}

// SetPerformedAt sets the "performed_at" field.
func (m *ActionMutation) SetPerformedAt(t time.Time) {
	m.performed_at = &t
}

// PerformedAt returns the value of the "performed_at" field in the mutation.
func (m *ActionMutation) PerformedAt() (r time.Time, exists bool) {
	v := m.performed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPerformedAt returns the old "performed_at" field's value of the Action entity.
// If the Action object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActionMutation) OldPerformedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPerformedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPerformedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPerformedAt: %w", err)
	}
	return oldValue.PerformedAt, nil
}

// ResetPerformedAt resets all changes to the "performed_at" field.
func (m *ActionMutation) ResetPerformedAt() {
	m.performed_at = nil
}

// SetActionToUserID sets the "ActionToUser" edge to the User entity by id.
func (m *ActionMutation) SetActionToUserID(id uuid.UUID) {
	m._ActionToUser = &id
}

// ClearActionToUser clears the "ActionToUser" edge to the User entity.
func (m *ActionMutation) ClearActionToUser() {
	m.cleared_ActionToUser = true
}

// ActionToUserCleared reports if the "ActionToUser" edge to the User entity was cleared.
func (m *ActionMutation) ActionToUserCleared() bool {
	return m.cleared_ActionToUser
}

// ActionToUserID returns the "ActionToUser" edge ID in the mutation.
func (m *ActionMutation) ActionToUserID() (id uuid.UUID, exists bool) {
	if m._ActionToUser != nil {
		return *m._ActionToUser, true
	}
	return
}

// ActionToUserIDs returns the "ActionToUser" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActionToUserID instead. It exists only for internal usage by the builders.
func (m *ActionMutation) ActionToUserIDs() (ids []uuid.UUID) {
	if id := m._ActionToUser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActionToUser resets all changes to the "ActionToUser" edge.
func (m *ActionMutation) ResetActionToUser() {
	m._ActionToUser = nil
	m.cleared_ActionToUser = false
}

// SetActionToServiceAccountID sets the "ActionToServiceAccount" edge to the ServiceAccount entity by id.
func (m *ActionMutation) SetActionToServiceAccountID(id uuid.UUID) {
	m._ActionToServiceAccount = &id
}

// ClearActionToServiceAccount clears the "ActionToServiceAccount" edge to the ServiceAccount entity.
func (m *ActionMutation) ClearActionToServiceAccount() {
	m.cleared_ActionToServiceAccount = true
}

// ActionToServiceAccountCleared reports if the "ActionToServiceAccount" edge to the ServiceAccount entity was cleared.
func (m *ActionMutation) ActionToServiceAccountCleared() bool {
	return m.cleared_ActionToServiceAccount
}

// ActionToServiceAccountID returns the "ActionToServiceAccount" edge ID in the mutation.
func (m *ActionMutation) ActionToServiceAccountID() (id uuid.UUID, exists bool) {
	if m._ActionToServiceAccount != nil {
		return *m._ActionToServiceAccount, true
	}
	return
}

// ActionToServiceAccountIDs returns the "ActionToServiceAccount" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ActionToServiceAccountID instead. It exists only for internal usage by the builders.
func (m *ActionMutation) ActionToServiceAccountIDs() (ids []uuid.UUID) {
	if id := m._ActionToServiceAccount; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetActionToServiceAccount resets all changes to the "ActionToServiceAccount" edge.
func (m *ActionMutation) ResetActionToServiceAccount() {
	m._ActionToServiceAccount = nil
	m.cleared_ActionToServiceAccount = false
}

// Where appends a list predicates to the ActionMutation builder.
func (m *ActionMutation) Where(ps ...predicate.Action) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ActionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Action).
func (m *ActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.ip_address != nil {
		fields = append(fields, action.FieldIPAddress)
	}
	if m._type != nil {
		fields = append(fields, action.FieldType)
	}
	if m.message != nil {
		fields = append(fields, action.FieldMessage)
	}
	if m.performed_at != nil {
		fields = append(fields, action.FieldPerformedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case action.FieldIPAddress:
		return m.IPAddress()
	case action.FieldType:
		return m.GetType()
	case action.FieldMessage:
		return m.Message()
	case action.FieldPerformedAt:
		return m.PerformedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case action.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case action.FieldType:
		return m.OldType(ctx)
	case action.FieldMessage:
		return m.OldMessage(ctx)
	case action.FieldPerformedAt:
		return m.OldPerformedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Action field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case action.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case action.FieldType:
		v, ok := value.(action.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case action.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case action.FieldPerformedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPerformedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Action field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Action numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Action nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActionMutation) ResetField(name string) error {
	switch name {
	case action.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case action.FieldType:
		m.ResetType()
		return nil
	case action.FieldMessage:
		m.ResetMessage()
		return nil
	case action.FieldPerformedAt:
		m.ResetPerformedAt()
		return nil
	}
	return fmt.Errorf("unknown Action field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._ActionToUser != nil {
		edges = append(edges, action.EdgeActionToUser)
	}
	if m._ActionToServiceAccount != nil {
		edges = append(edges, action.EdgeActionToServiceAccount)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case action.EdgeActionToUser:
		if id := m._ActionToUser; id != nil {
			return []ent.Value{*id}
		}
	case action.EdgeActionToServiceAccount:
		if id := m._ActionToServiceAccount; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_ActionToUser {
		edges = append(edges, action.EdgeActionToUser)
	}
	if m.cleared_ActionToServiceAccount {
		edges = append(edges, action.EdgeActionToServiceAccount)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActionMutation) EdgeCleared(name string) bool {
	switch name {
	case action.EdgeActionToUser:
		return m.cleared_ActionToUser
	case action.EdgeActionToServiceAccount:
		return m.cleared_ActionToServiceAccount
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActionMutation) ClearEdge(name string) error {
	switch name {
	case action.EdgeActionToUser:
		m.ClearActionToUser()
		return nil
	case action.EdgeActionToServiceAccount:
		m.ClearActionToServiceAccount()
		return nil
	}
	return fmt.Errorf("unknown Action unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActionMutation) ResetEdge(name string) error {
	switch name {
	case action.EdgeActionToUser:
		m.ResetActionToUser()
		return nil
	case action.EdgeActionToServiceAccount:
		m.ResetActionToServiceAccount()
		return nil
	}
	return fmt.Errorf("unknown Action edge %s", name)
}

// CompetitionMutation represents an operation that mutates the Competition nodes in the graph.
type CompetitionMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	name                          *string
	clearedFields                 map[string]struct{}
	_CompetitionToTeams           map[uuid.UUID]struct{}
	removed_CompetitionToTeams    map[uuid.UUID]struct{}
	cleared_CompetitionToTeams    bool
	_CompetitionToProvider        *uuid.UUID
	cleared_CompetitionToProvider bool
	done                          bool
	oldValue                      func(context.Context) (*Competition, error)
	predicates                    []predicate.Competition
}

var _ ent.Mutation = (*CompetitionMutation)(nil)

// competitionOption allows management of the mutation configuration using functional options.
type competitionOption func(*CompetitionMutation)

// newCompetitionMutation creates new mutation for the Competition entity.
func newCompetitionMutation(c config, op Op, opts ...competitionOption) *CompetitionMutation {
	m := &CompetitionMutation{
		config:        c,
		op:            op,
		typ:           TypeCompetition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompetitionID sets the ID field of the mutation.
func withCompetitionID(id uuid.UUID) competitionOption {
	return func(m *CompetitionMutation) {
		var (
			err   error
			once  sync.Once
			value *Competition
		)
		m.oldValue = func(ctx context.Context) (*Competition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Competition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompetition sets the old Competition of the mutation.
func withCompetition(node *Competition) competitionOption {
	return func(m *CompetitionMutation) {
		m.oldValue = func(context.Context) (*Competition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompetitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompetitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Competition entities.
func (m *CompetitionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompetitionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CompetitionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Competition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CompetitionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CompetitionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Competition entity.
// If the Competition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompetitionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CompetitionMutation) ResetName() {
	m.name = nil
}

// AddCompetitionToTeamIDs adds the "CompetitionToTeams" edge to the Team entity by ids.
func (m *CompetitionMutation) AddCompetitionToTeamIDs(ids ...uuid.UUID) {
	if m._CompetitionToTeams == nil {
		m._CompetitionToTeams = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._CompetitionToTeams[ids[i]] = struct{}{}
	}
}

// ClearCompetitionToTeams clears the "CompetitionToTeams" edge to the Team entity.
func (m *CompetitionMutation) ClearCompetitionToTeams() {
	m.cleared_CompetitionToTeams = true
}

// CompetitionToTeamsCleared reports if the "CompetitionToTeams" edge to the Team entity was cleared.
func (m *CompetitionMutation) CompetitionToTeamsCleared() bool {
	return m.cleared_CompetitionToTeams
}

// RemoveCompetitionToTeamIDs removes the "CompetitionToTeams" edge to the Team entity by IDs.
func (m *CompetitionMutation) RemoveCompetitionToTeamIDs(ids ...uuid.UUID) {
	if m.removed_CompetitionToTeams == nil {
		m.removed_CompetitionToTeams = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._CompetitionToTeams, ids[i])
		m.removed_CompetitionToTeams[ids[i]] = struct{}{}
	}
}

// RemovedCompetitionToTeams returns the removed IDs of the "CompetitionToTeams" edge to the Team entity.
func (m *CompetitionMutation) RemovedCompetitionToTeamsIDs() (ids []uuid.UUID) {
	for id := range m.removed_CompetitionToTeams {
		ids = append(ids, id)
	}
	return
}

// CompetitionToTeamsIDs returns the "CompetitionToTeams" edge IDs in the mutation.
func (m *CompetitionMutation) CompetitionToTeamsIDs() (ids []uuid.UUID) {
	for id := range m._CompetitionToTeams {
		ids = append(ids, id)
	}
	return
}

// ResetCompetitionToTeams resets all changes to the "CompetitionToTeams" edge.
func (m *CompetitionMutation) ResetCompetitionToTeams() {
	m._CompetitionToTeams = nil
	m.cleared_CompetitionToTeams = false
	m.removed_CompetitionToTeams = nil
}

// SetCompetitionToProviderID sets the "CompetitionToProvider" edge to the Provider entity by id.
func (m *CompetitionMutation) SetCompetitionToProviderID(id uuid.UUID) {
	m._CompetitionToProvider = &id
}

// ClearCompetitionToProvider clears the "CompetitionToProvider" edge to the Provider entity.
func (m *CompetitionMutation) ClearCompetitionToProvider() {
	m.cleared_CompetitionToProvider = true
}

// CompetitionToProviderCleared reports if the "CompetitionToProvider" edge to the Provider entity was cleared.
func (m *CompetitionMutation) CompetitionToProviderCleared() bool {
	return m.cleared_CompetitionToProvider
}

// CompetitionToProviderID returns the "CompetitionToProvider" edge ID in the mutation.
func (m *CompetitionMutation) CompetitionToProviderID() (id uuid.UUID, exists bool) {
	if m._CompetitionToProvider != nil {
		return *m._CompetitionToProvider, true
	}
	return
}

// CompetitionToProviderIDs returns the "CompetitionToProvider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompetitionToProviderID instead. It exists only for internal usage by the builders.
func (m *CompetitionMutation) CompetitionToProviderIDs() (ids []uuid.UUID) {
	if id := m._CompetitionToProvider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompetitionToProvider resets all changes to the "CompetitionToProvider" edge.
func (m *CompetitionMutation) ResetCompetitionToProvider() {
	m._CompetitionToProvider = nil
	m.cleared_CompetitionToProvider = false
}

// Where appends a list predicates to the CompetitionMutation builder.
func (m *CompetitionMutation) Where(ps ...predicate.Competition) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompetitionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Competition).
func (m *CompetitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompetitionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, competition.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompetitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case competition.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompetitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case competition.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Competition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompetitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case competition.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Competition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompetitionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompetitionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompetitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Competition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompetitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompetitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompetitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Competition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompetitionMutation) ResetField(name string) error {
	switch name {
	case competition.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Competition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompetitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._CompetitionToTeams != nil {
		edges = append(edges, competition.EdgeCompetitionToTeams)
	}
	if m._CompetitionToProvider != nil {
		edges = append(edges, competition.EdgeCompetitionToProvider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompetitionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case competition.EdgeCompetitionToTeams:
		ids := make([]ent.Value, 0, len(m._CompetitionToTeams))
		for id := range m._CompetitionToTeams {
			ids = append(ids, id)
		}
		return ids
	case competition.EdgeCompetitionToProvider:
		if id := m._CompetitionToProvider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompetitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_CompetitionToTeams != nil {
		edges = append(edges, competition.EdgeCompetitionToTeams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompetitionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case competition.EdgeCompetitionToTeams:
		ids := make([]ent.Value, 0, len(m.removed_CompetitionToTeams))
		for id := range m.removed_CompetitionToTeams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompetitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_CompetitionToTeams {
		edges = append(edges, competition.EdgeCompetitionToTeams)
	}
	if m.cleared_CompetitionToProvider {
		edges = append(edges, competition.EdgeCompetitionToProvider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompetitionMutation) EdgeCleared(name string) bool {
	switch name {
	case competition.EdgeCompetitionToTeams:
		return m.cleared_CompetitionToTeams
	case competition.EdgeCompetitionToProvider:
		return m.cleared_CompetitionToProvider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompetitionMutation) ClearEdge(name string) error {
	switch name {
	case competition.EdgeCompetitionToProvider:
		m.ClearCompetitionToProvider()
		return nil
	}
	return fmt.Errorf("unknown Competition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompetitionMutation) ResetEdge(name string) error {
	switch name {
	case competition.EdgeCompetitionToTeams:
		m.ResetCompetitionToTeams()
		return nil
	case competition.EdgeCompetitionToProvider:
		m.ResetCompetitionToProvider()
		return nil
	}
	return fmt.Errorf("unknown Competition edge %s", name)
}

// ProviderMutation represents an operation that mutates the Provider nodes in the graph.
type ProviderMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	name                          *string
	_type                         *string
	_config                       *string
	clearedFields                 map[string]struct{}
	_ProviderToCompetition        map[uuid.UUID]struct{}
	removed_ProviderToCompetition map[uuid.UUID]struct{}
	cleared_ProviderToCompetition bool
	done                          bool
	oldValue                      func(context.Context) (*Provider, error)
	predicates                    []predicate.Provider
}

var _ ent.Mutation = (*ProviderMutation)(nil)

// providerOption allows management of the mutation configuration using functional options.
type providerOption func(*ProviderMutation)

// newProviderMutation creates new mutation for the Provider entity.
func newProviderMutation(c config, op Op, opts ...providerOption) *ProviderMutation {
	m := &ProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderID sets the ID field of the mutation.
func withProviderID(id uuid.UUID) providerOption {
	return func(m *ProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *Provider
		)
		m.oldValue = func(ctx context.Context) (*Provider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Provider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvider sets the old Provider of the mutation.
func withProvider(node *Provider) providerOption {
	return func(m *ProviderMutation) {
		m.oldValue = func(context.Context) (*Provider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Provider entities.
func (m *ProviderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Provider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ProviderMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProviderMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProviderMutation) ResetType() {
	m._type = nil
}

// SetConfig sets the "config" field.
func (m *ProviderMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *ProviderMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *ProviderMutation) ResetConfig() {
	m._config = nil
}

// AddProviderToCompetitionIDs adds the "ProviderToCompetition" edge to the Competition entity by ids.
func (m *ProviderMutation) AddProviderToCompetitionIDs(ids ...uuid.UUID) {
	if m._ProviderToCompetition == nil {
		m._ProviderToCompetition = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._ProviderToCompetition[ids[i]] = struct{}{}
	}
}

// ClearProviderToCompetition clears the "ProviderToCompetition" edge to the Competition entity.
func (m *ProviderMutation) ClearProviderToCompetition() {
	m.cleared_ProviderToCompetition = true
}

// ProviderToCompetitionCleared reports if the "ProviderToCompetition" edge to the Competition entity was cleared.
func (m *ProviderMutation) ProviderToCompetitionCleared() bool {
	return m.cleared_ProviderToCompetition
}

// RemoveProviderToCompetitionIDs removes the "ProviderToCompetition" edge to the Competition entity by IDs.
func (m *ProviderMutation) RemoveProviderToCompetitionIDs(ids ...uuid.UUID) {
	if m.removed_ProviderToCompetition == nil {
		m.removed_ProviderToCompetition = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._ProviderToCompetition, ids[i])
		m.removed_ProviderToCompetition[ids[i]] = struct{}{}
	}
}

// RemovedProviderToCompetition returns the removed IDs of the "ProviderToCompetition" edge to the Competition entity.
func (m *ProviderMutation) RemovedProviderToCompetitionIDs() (ids []uuid.UUID) {
	for id := range m.removed_ProviderToCompetition {
		ids = append(ids, id)
	}
	return
}

// ProviderToCompetitionIDs returns the "ProviderToCompetition" edge IDs in the mutation.
func (m *ProviderMutation) ProviderToCompetitionIDs() (ids []uuid.UUID) {
	for id := range m._ProviderToCompetition {
		ids = append(ids, id)
	}
	return
}

// ResetProviderToCompetition resets all changes to the "ProviderToCompetition" edge.
func (m *ProviderMutation) ResetProviderToCompetition() {
	m._ProviderToCompetition = nil
	m.cleared_ProviderToCompetition = false
	m.removed_ProviderToCompetition = nil
}

// Where appends a list predicates to the ProviderMutation builder.
func (m *ProviderMutation) Where(ps ...predicate.Provider) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProviderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Provider).
func (m *ProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, provider.FieldName)
	}
	if m._type != nil {
		fields = append(fields, provider.FieldType)
	}
	if m._config != nil {
		fields = append(fields, provider.FieldConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provider.FieldName:
		return m.Name()
	case provider.FieldType:
		return m.GetType()
	case provider.FieldConfig:
		return m.Config()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provider.FieldName:
		return m.OldName(ctx)
	case provider.FieldType:
		return m.OldType(ctx)
	case provider.FieldConfig:
		return m.OldConfig(ctx)
	}
	return nil, fmt.Errorf("unknown Provider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case provider.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case provider.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Provider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderMutation) ResetField(name string) error {
	switch name {
	case provider.FieldName:
		m.ResetName()
		return nil
	case provider.FieldType:
		m.ResetType()
		return nil
	case provider.FieldConfig:
		m.ResetConfig()
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ProviderToCompetition != nil {
		edges = append(edges, provider.EdgeProviderToCompetition)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeProviderToCompetition:
		ids := make([]ent.Value, 0, len(m._ProviderToCompetition))
		for id := range m._ProviderToCompetition {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ProviderToCompetition != nil {
		edges = append(edges, provider.EdgeProviderToCompetition)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case provider.EdgeProviderToCompetition:
		ids := make([]ent.Value, 0, len(m.removed_ProviderToCompetition))
		for id := range m.removed_ProviderToCompetition {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_ProviderToCompetition {
		edges = append(edges, provider.EdgeProviderToCompetition)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderMutation) EdgeCleared(name string) bool {
	switch name {
	case provider.EdgeProviderToCompetition:
		return m.cleared_ProviderToCompetition
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderMutation) ResetEdge(name string) error {
	switch name {
	case provider.EdgeProviderToCompetition:
		m.ResetProviderToCompetition()
		return nil
	}
	return fmt.Errorf("unknown Provider edge %s", name)
}

// ServiceAccountMutation represents an operation that mutates the ServiceAccount nodes in the graph.
type ServiceAccountMutation struct {
	config
	op                              Op
	typ                             string
	id                              *uuid.UUID
	display_name                    *string
	api_key                         *uuid.UUID
	api_secret                      *uuid.UUID
	active                          *serviceaccount.Active
	clearedFields                   map[string]struct{}
	_ServiceAccountToToken          map[uuid.UUID]struct{}
	removed_ServiceAccountToToken   map[uuid.UUID]struct{}
	cleared_ServiceAccountToToken   bool
	_ServiceAccountToActions        map[uuid.UUID]struct{}
	removed_ServiceAccountToActions map[uuid.UUID]struct{}
	cleared_ServiceAccountToActions bool
	done                            bool
	oldValue                        func(context.Context) (*ServiceAccount, error)
	predicates                      []predicate.ServiceAccount
}

var _ ent.Mutation = (*ServiceAccountMutation)(nil)

// serviceaccountOption allows management of the mutation configuration using functional options.
type serviceaccountOption func(*ServiceAccountMutation)

// newServiceAccountMutation creates new mutation for the ServiceAccount entity.
func newServiceAccountMutation(c config, op Op, opts ...serviceaccountOption) *ServiceAccountMutation {
	m := &ServiceAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceAccountID sets the ID field of the mutation.
func withServiceAccountID(id uuid.UUID) serviceaccountOption {
	return func(m *ServiceAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceAccount
		)
		m.oldValue = func(ctx context.Context) (*ServiceAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceAccount sets the old ServiceAccount of the mutation.
func withServiceAccount(node *ServiceAccount) serviceaccountOption {
	return func(m *ServiceAccountMutation) {
		m.oldValue = func(context.Context) (*ServiceAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ServiceAccount entities.
func (m *ServiceAccountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceAccountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceAccountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDisplayName sets the "display_name" field.
func (m *ServiceAccountMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ServiceAccountMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ServiceAccountMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetAPIKey sets the "api_key" field.
func (m *ServiceAccountMutation) SetAPIKey(u uuid.UUID) {
	m.api_key = &u
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *ServiceAccountMutation) APIKey() (r uuid.UUID, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldAPIKey(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *ServiceAccountMutation) ResetAPIKey() {
	m.api_key = nil
}

// SetAPISecret sets the "api_secret" field.
func (m *ServiceAccountMutation) SetAPISecret(u uuid.UUID) {
	m.api_secret = &u
}

// APISecret returns the value of the "api_secret" field in the mutation.
func (m *ServiceAccountMutation) APISecret() (r uuid.UUID, exists bool) {
	v := m.api_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldAPISecret returns the old "api_secret" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldAPISecret(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPISecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPISecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPISecret: %w", err)
	}
	return oldValue.APISecret, nil
}

// ResetAPISecret resets all changes to the "api_secret" field.
func (m *ServiceAccountMutation) ResetAPISecret() {
	m.api_secret = nil
}

// SetActive sets the "active" field.
func (m *ServiceAccountMutation) SetActive(s serviceaccount.Active) {
	m.active = &s
}

// Active returns the value of the "active" field in the mutation.
func (m *ServiceAccountMutation) Active() (r serviceaccount.Active, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldActive(ctx context.Context) (v serviceaccount.Active, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *ServiceAccountMutation) ResetActive() {
	m.active = nil
}

// AddServiceAccountToTokenIDs adds the "ServiceAccountToToken" edge to the ServiceToken entity by ids.
func (m *ServiceAccountMutation) AddServiceAccountToTokenIDs(ids ...uuid.UUID) {
	if m._ServiceAccountToToken == nil {
		m._ServiceAccountToToken = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._ServiceAccountToToken[ids[i]] = struct{}{}
	}
}

// ClearServiceAccountToToken clears the "ServiceAccountToToken" edge to the ServiceToken entity.
func (m *ServiceAccountMutation) ClearServiceAccountToToken() {
	m.cleared_ServiceAccountToToken = true
}

// ServiceAccountToTokenCleared reports if the "ServiceAccountToToken" edge to the ServiceToken entity was cleared.
func (m *ServiceAccountMutation) ServiceAccountToTokenCleared() bool {
	return m.cleared_ServiceAccountToToken
}

// RemoveServiceAccountToTokenIDs removes the "ServiceAccountToToken" edge to the ServiceToken entity by IDs.
func (m *ServiceAccountMutation) RemoveServiceAccountToTokenIDs(ids ...uuid.UUID) {
	if m.removed_ServiceAccountToToken == nil {
		m.removed_ServiceAccountToToken = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._ServiceAccountToToken, ids[i])
		m.removed_ServiceAccountToToken[ids[i]] = struct{}{}
	}
}

// RemovedServiceAccountToToken returns the removed IDs of the "ServiceAccountToToken" edge to the ServiceToken entity.
func (m *ServiceAccountMutation) RemovedServiceAccountToTokenIDs() (ids []uuid.UUID) {
	for id := range m.removed_ServiceAccountToToken {
		ids = append(ids, id)
	}
	return
}

// ServiceAccountToTokenIDs returns the "ServiceAccountToToken" edge IDs in the mutation.
func (m *ServiceAccountMutation) ServiceAccountToTokenIDs() (ids []uuid.UUID) {
	for id := range m._ServiceAccountToToken {
		ids = append(ids, id)
	}
	return
}

// ResetServiceAccountToToken resets all changes to the "ServiceAccountToToken" edge.
func (m *ServiceAccountMutation) ResetServiceAccountToToken() {
	m._ServiceAccountToToken = nil
	m.cleared_ServiceAccountToToken = false
	m.removed_ServiceAccountToToken = nil
}

// AddServiceAccountToActionIDs adds the "ServiceAccountToActions" edge to the Action entity by ids.
func (m *ServiceAccountMutation) AddServiceAccountToActionIDs(ids ...uuid.UUID) {
	if m._ServiceAccountToActions == nil {
		m._ServiceAccountToActions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._ServiceAccountToActions[ids[i]] = struct{}{}
	}
}

// ClearServiceAccountToActions clears the "ServiceAccountToActions" edge to the Action entity.
func (m *ServiceAccountMutation) ClearServiceAccountToActions() {
	m.cleared_ServiceAccountToActions = true
}

// ServiceAccountToActionsCleared reports if the "ServiceAccountToActions" edge to the Action entity was cleared.
func (m *ServiceAccountMutation) ServiceAccountToActionsCleared() bool {
	return m.cleared_ServiceAccountToActions
}

// RemoveServiceAccountToActionIDs removes the "ServiceAccountToActions" edge to the Action entity by IDs.
func (m *ServiceAccountMutation) RemoveServiceAccountToActionIDs(ids ...uuid.UUID) {
	if m.removed_ServiceAccountToActions == nil {
		m.removed_ServiceAccountToActions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._ServiceAccountToActions, ids[i])
		m.removed_ServiceAccountToActions[ids[i]] = struct{}{}
	}
}

// RemovedServiceAccountToActions returns the removed IDs of the "ServiceAccountToActions" edge to the Action entity.
func (m *ServiceAccountMutation) RemovedServiceAccountToActionsIDs() (ids []uuid.UUID) {
	for id := range m.removed_ServiceAccountToActions {
		ids = append(ids, id)
	}
	return
}

// ServiceAccountToActionsIDs returns the "ServiceAccountToActions" edge IDs in the mutation.
func (m *ServiceAccountMutation) ServiceAccountToActionsIDs() (ids []uuid.UUID) {
	for id := range m._ServiceAccountToActions {
		ids = append(ids, id)
	}
	return
}

// ResetServiceAccountToActions resets all changes to the "ServiceAccountToActions" edge.
func (m *ServiceAccountMutation) ResetServiceAccountToActions() {
	m._ServiceAccountToActions = nil
	m.cleared_ServiceAccountToActions = false
	m.removed_ServiceAccountToActions = nil
}

// Where appends a list predicates to the ServiceAccountMutation builder.
func (m *ServiceAccountMutation) Where(ps ...predicate.ServiceAccount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ServiceAccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ServiceAccount).
func (m *ServiceAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceAccountMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.display_name != nil {
		fields = append(fields, serviceaccount.FieldDisplayName)
	}
	if m.api_key != nil {
		fields = append(fields, serviceaccount.FieldAPIKey)
	}
	if m.api_secret != nil {
		fields = append(fields, serviceaccount.FieldAPISecret)
	}
	if m.active != nil {
		fields = append(fields, serviceaccount.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case serviceaccount.FieldDisplayName:
		return m.DisplayName()
	case serviceaccount.FieldAPIKey:
		return m.APIKey()
	case serviceaccount.FieldAPISecret:
		return m.APISecret()
	case serviceaccount.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case serviceaccount.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case serviceaccount.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case serviceaccount.FieldAPISecret:
		return m.OldAPISecret(ctx)
	case serviceaccount.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case serviceaccount.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case serviceaccount.FieldAPIKey:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case serviceaccount.FieldAPISecret:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPISecret(v)
		return nil
	case serviceaccount.FieldActive:
		v, ok := value.(serviceaccount.Active)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceAccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceAccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ServiceAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceAccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceAccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ServiceAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceAccountMutation) ResetField(name string) error {
	switch name {
	case serviceaccount.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case serviceaccount.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case serviceaccount.FieldAPISecret:
		m.ResetAPISecret()
		return nil
	case serviceaccount.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._ServiceAccountToToken != nil {
		edges = append(edges, serviceaccount.EdgeServiceAccountToToken)
	}
	if m._ServiceAccountToActions != nil {
		edges = append(edges, serviceaccount.EdgeServiceAccountToActions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceAccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case serviceaccount.EdgeServiceAccountToToken:
		ids := make([]ent.Value, 0, len(m._ServiceAccountToToken))
		for id := range m._ServiceAccountToToken {
			ids = append(ids, id)
		}
		return ids
	case serviceaccount.EdgeServiceAccountToActions:
		ids := make([]ent.Value, 0, len(m._ServiceAccountToActions))
		for id := range m._ServiceAccountToActions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_ServiceAccountToToken != nil {
		edges = append(edges, serviceaccount.EdgeServiceAccountToToken)
	}
	if m.removed_ServiceAccountToActions != nil {
		edges = append(edges, serviceaccount.EdgeServiceAccountToActions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceAccountMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case serviceaccount.EdgeServiceAccountToToken:
		ids := make([]ent.Value, 0, len(m.removed_ServiceAccountToToken))
		for id := range m.removed_ServiceAccountToToken {
			ids = append(ids, id)
		}
		return ids
	case serviceaccount.EdgeServiceAccountToActions:
		ids := make([]ent.Value, 0, len(m.removed_ServiceAccountToActions))
		for id := range m.removed_ServiceAccountToActions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_ServiceAccountToToken {
		edges = append(edges, serviceaccount.EdgeServiceAccountToToken)
	}
	if m.cleared_ServiceAccountToActions {
		edges = append(edges, serviceaccount.EdgeServiceAccountToActions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceAccountMutation) EdgeCleared(name string) bool {
	switch name {
	case serviceaccount.EdgeServiceAccountToToken:
		return m.cleared_ServiceAccountToToken
	case serviceaccount.EdgeServiceAccountToActions:
		return m.cleared_ServiceAccountToActions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceAccountMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ServiceAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceAccountMutation) ResetEdge(name string) error {
	switch name {
	case serviceaccount.EdgeServiceAccountToToken:
		m.ResetServiceAccountToToken()
		return nil
	case serviceaccount.EdgeServiceAccountToActions:
		m.ResetServiceAccountToActions()
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount edge %s", name)
}

// ServiceTokenMutation represents an operation that mutates the ServiceToken nodes in the graph.
type ServiceTokenMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	token                         *string
	refresh_token                 *string
	expire_at                     *int64
	addexpire_at                  *int64
	clearedFields                 map[string]struct{}
	_TokenToServiceAccount        *uuid.UUID
	cleared_TokenToServiceAccount bool
	done                          bool
	oldValue                      func(context.Context) (*ServiceToken, error)
	predicates                    []predicate.ServiceToken
}

var _ ent.Mutation = (*ServiceTokenMutation)(nil)

// servicetokenOption allows management of the mutation configuration using functional options.
type servicetokenOption func(*ServiceTokenMutation)

// newServiceTokenMutation creates new mutation for the ServiceToken entity.
func newServiceTokenMutation(c config, op Op, opts ...servicetokenOption) *ServiceTokenMutation {
	m := &ServiceTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceTokenID sets the ID field of the mutation.
func withServiceTokenID(id uuid.UUID) servicetokenOption {
	return func(m *ServiceTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceToken
		)
		m.oldValue = func(ctx context.Context) (*ServiceToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceToken sets the old ServiceToken of the mutation.
func withServiceToken(node *ServiceToken) servicetokenOption {
	return func(m *ServiceTokenMutation) {
		m.oldValue = func(context.Context) (*ServiceToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ServiceToken entities.
func (m *ServiceTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *ServiceTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *ServiceTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the ServiceToken entity.
// If the ServiceToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *ServiceTokenMutation) ResetToken() {
	m.token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *ServiceTokenMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *ServiceTokenMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the ServiceToken entity.
// If the ServiceToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceTokenMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *ServiceTokenMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *ServiceTokenMutation) SetExpireAt(i int64) {
	m.expire_at = &i
	m.addexpire_at = nil
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *ServiceTokenMutation) ExpireAt() (r int64, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the ServiceToken entity.
// If the ServiceToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceTokenMutation) OldExpireAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// AddExpireAt adds i to the "expire_at" field.
func (m *ServiceTokenMutation) AddExpireAt(i int64) {
	if m.addexpire_at != nil {
		*m.addexpire_at += i
	} else {
		m.addexpire_at = &i
	}
}

// AddedExpireAt returns the value that was added to the "expire_at" field in this mutation.
func (m *ServiceTokenMutation) AddedExpireAt() (r int64, exists bool) {
	v := m.addexpire_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *ServiceTokenMutation) ResetExpireAt() {
	m.expire_at = nil
	m.addexpire_at = nil
}

// SetTokenToServiceAccountID sets the "TokenToServiceAccount" edge to the ServiceAccount entity by id.
func (m *ServiceTokenMutation) SetTokenToServiceAccountID(id uuid.UUID) {
	m._TokenToServiceAccount = &id
}

// ClearTokenToServiceAccount clears the "TokenToServiceAccount" edge to the ServiceAccount entity.
func (m *ServiceTokenMutation) ClearTokenToServiceAccount() {
	m.cleared_TokenToServiceAccount = true
}

// TokenToServiceAccountCleared reports if the "TokenToServiceAccount" edge to the ServiceAccount entity was cleared.
func (m *ServiceTokenMutation) TokenToServiceAccountCleared() bool {
	return m.cleared_TokenToServiceAccount
}

// TokenToServiceAccountID returns the "TokenToServiceAccount" edge ID in the mutation.
func (m *ServiceTokenMutation) TokenToServiceAccountID() (id uuid.UUID, exists bool) {
	if m._TokenToServiceAccount != nil {
		return *m._TokenToServiceAccount, true
	}
	return
}

// TokenToServiceAccountIDs returns the "TokenToServiceAccount" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenToServiceAccountID instead. It exists only for internal usage by the builders.
func (m *ServiceTokenMutation) TokenToServiceAccountIDs() (ids []uuid.UUID) {
	if id := m._TokenToServiceAccount; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTokenToServiceAccount resets all changes to the "TokenToServiceAccount" edge.
func (m *ServiceTokenMutation) ResetTokenToServiceAccount() {
	m._TokenToServiceAccount = nil
	m.cleared_TokenToServiceAccount = false
}

// Where appends a list predicates to the ServiceTokenMutation builder.
func (m *ServiceTokenMutation) Where(ps ...predicate.ServiceToken) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ServiceTokenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ServiceToken).
func (m *ServiceTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceTokenMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.token != nil {
		fields = append(fields, servicetoken.FieldToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, servicetoken.FieldRefreshToken)
	}
	if m.expire_at != nil {
		fields = append(fields, servicetoken.FieldExpireAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case servicetoken.FieldToken:
		return m.Token()
	case servicetoken.FieldRefreshToken:
		return m.RefreshToken()
	case servicetoken.FieldExpireAt:
		return m.ExpireAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case servicetoken.FieldToken:
		return m.OldToken(ctx)
	case servicetoken.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case servicetoken.FieldExpireAt:
		return m.OldExpireAt(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case servicetoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case servicetoken.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case servicetoken.FieldExpireAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceTokenMutation) AddedFields() []string {
	var fields []string
	if m.addexpire_at != nil {
		fields = append(fields, servicetoken.FieldExpireAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceTokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case servicetoken.FieldExpireAt:
		return m.AddedExpireAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case servicetoken.FieldExpireAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpireAt(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ServiceToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceTokenMutation) ResetField(name string) error {
	switch name {
	case servicetoken.FieldToken:
		m.ResetToken()
		return nil
	case servicetoken.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case servicetoken.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	}
	return fmt.Errorf("unknown ServiceToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._TokenToServiceAccount != nil {
		edges = append(edges, servicetoken.EdgeTokenToServiceAccount)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case servicetoken.EdgeTokenToServiceAccount:
		if id := m._TokenToServiceAccount; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceTokenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_TokenToServiceAccount {
		edges = append(edges, servicetoken.EdgeTokenToServiceAccount)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case servicetoken.EdgeTokenToServiceAccount:
		return m.cleared_TokenToServiceAccount
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceTokenMutation) ClearEdge(name string) error {
	switch name {
	case servicetoken.EdgeTokenToServiceAccount:
		m.ClearTokenToServiceAccount()
		return nil
	}
	return fmt.Errorf("unknown ServiceToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceTokenMutation) ResetEdge(name string) error {
	switch name {
	case servicetoken.EdgeTokenToServiceAccount:
		m.ResetTokenToServiceAccount()
		return nil
	}
	return fmt.Errorf("unknown ServiceToken edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	team_number               *int
	addteam_number            *int
	name                      *string
	clearedFields             map[string]struct{}
	_TeamToCompetition        *uuid.UUID
	cleared_TeamToCompetition bool
	_TeamToVmObjects          map[uuid.UUID]struct{}
	removed_TeamToVmObjects   map[uuid.UUID]struct{}
	cleared_TeamToVmObjects   bool
	_TeamToUsers              map[uuid.UUID]struct{}
	removed_TeamToUsers       map[uuid.UUID]struct{}
	cleared_TeamToUsers       bool
	done                      bool
	oldValue                  func(context.Context) (*Team, error)
	predicates                []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id uuid.UUID) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Team entities.
func (m *TeamMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTeamNumber sets the "team_number" field.
func (m *TeamMutation) SetTeamNumber(i int) {
	m.team_number = &i
	m.addteam_number = nil
}

// TeamNumber returns the value of the "team_number" field in the mutation.
func (m *TeamMutation) TeamNumber() (r int, exists bool) {
	v := m.team_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTeamNumber returns the old "team_number" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldTeamNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeamNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeamNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeamNumber: %w", err)
	}
	return oldValue.TeamNumber, nil
}

// AddTeamNumber adds i to the "team_number" field.
func (m *TeamMutation) AddTeamNumber(i int) {
	if m.addteam_number != nil {
		*m.addteam_number += i
	} else {
		m.addteam_number = &i
	}
}

// AddedTeamNumber returns the value that was added to the "team_number" field in this mutation.
func (m *TeamMutation) AddedTeamNumber() (r int, exists bool) {
	v := m.addteam_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTeamNumber resets all changes to the "team_number" field.
func (m *TeamMutation) ResetTeamNumber() {
	m.team_number = nil
	m.addteam_number = nil
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TeamMutation) ClearName() {
	m.name = nil
	m.clearedFields[team.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TeamMutation) NameCleared() bool {
	_, ok := m.clearedFields[team.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, team.FieldName)
}

// SetTeamToCompetitionID sets the "TeamToCompetition" edge to the Competition entity by id.
func (m *TeamMutation) SetTeamToCompetitionID(id uuid.UUID) {
	m._TeamToCompetition = &id
}

// ClearTeamToCompetition clears the "TeamToCompetition" edge to the Competition entity.
func (m *TeamMutation) ClearTeamToCompetition() {
	m.cleared_TeamToCompetition = true
}

// TeamToCompetitionCleared reports if the "TeamToCompetition" edge to the Competition entity was cleared.
func (m *TeamMutation) TeamToCompetitionCleared() bool {
	return m.cleared_TeamToCompetition
}

// TeamToCompetitionID returns the "TeamToCompetition" edge ID in the mutation.
func (m *TeamMutation) TeamToCompetitionID() (id uuid.UUID, exists bool) {
	if m._TeamToCompetition != nil {
		return *m._TeamToCompetition, true
	}
	return
}

// TeamToCompetitionIDs returns the "TeamToCompetition" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamToCompetitionID instead. It exists only for internal usage by the builders.
func (m *TeamMutation) TeamToCompetitionIDs() (ids []uuid.UUID) {
	if id := m._TeamToCompetition; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeamToCompetition resets all changes to the "TeamToCompetition" edge.
func (m *TeamMutation) ResetTeamToCompetition() {
	m._TeamToCompetition = nil
	m.cleared_TeamToCompetition = false
}

// AddTeamToVmObjectIDs adds the "TeamToVmObjects" edge to the VmObject entity by ids.
func (m *TeamMutation) AddTeamToVmObjectIDs(ids ...uuid.UUID) {
	if m._TeamToVmObjects == nil {
		m._TeamToVmObjects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._TeamToVmObjects[ids[i]] = struct{}{}
	}
}

// ClearTeamToVmObjects clears the "TeamToVmObjects" edge to the VmObject entity.
func (m *TeamMutation) ClearTeamToVmObjects() {
	m.cleared_TeamToVmObjects = true
}

// TeamToVmObjectsCleared reports if the "TeamToVmObjects" edge to the VmObject entity was cleared.
func (m *TeamMutation) TeamToVmObjectsCleared() bool {
	return m.cleared_TeamToVmObjects
}

// RemoveTeamToVmObjectIDs removes the "TeamToVmObjects" edge to the VmObject entity by IDs.
func (m *TeamMutation) RemoveTeamToVmObjectIDs(ids ...uuid.UUID) {
	if m.removed_TeamToVmObjects == nil {
		m.removed_TeamToVmObjects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._TeamToVmObjects, ids[i])
		m.removed_TeamToVmObjects[ids[i]] = struct{}{}
	}
}

// RemovedTeamToVmObjects returns the removed IDs of the "TeamToVmObjects" edge to the VmObject entity.
func (m *TeamMutation) RemovedTeamToVmObjectsIDs() (ids []uuid.UUID) {
	for id := range m.removed_TeamToVmObjects {
		ids = append(ids, id)
	}
	return
}

// TeamToVmObjectsIDs returns the "TeamToVmObjects" edge IDs in the mutation.
func (m *TeamMutation) TeamToVmObjectsIDs() (ids []uuid.UUID) {
	for id := range m._TeamToVmObjects {
		ids = append(ids, id)
	}
	return
}

// ResetTeamToVmObjects resets all changes to the "TeamToVmObjects" edge.
func (m *TeamMutation) ResetTeamToVmObjects() {
	m._TeamToVmObjects = nil
	m.cleared_TeamToVmObjects = false
	m.removed_TeamToVmObjects = nil
}

// AddTeamToUserIDs adds the "TeamToUsers" edge to the User entity by ids.
func (m *TeamMutation) AddTeamToUserIDs(ids ...uuid.UUID) {
	if m._TeamToUsers == nil {
		m._TeamToUsers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._TeamToUsers[ids[i]] = struct{}{}
	}
}

// ClearTeamToUsers clears the "TeamToUsers" edge to the User entity.
func (m *TeamMutation) ClearTeamToUsers() {
	m.cleared_TeamToUsers = true
}

// TeamToUsersCleared reports if the "TeamToUsers" edge to the User entity was cleared.
func (m *TeamMutation) TeamToUsersCleared() bool {
	return m.cleared_TeamToUsers
}

// RemoveTeamToUserIDs removes the "TeamToUsers" edge to the User entity by IDs.
func (m *TeamMutation) RemoveTeamToUserIDs(ids ...uuid.UUID) {
	if m.removed_TeamToUsers == nil {
		m.removed_TeamToUsers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._TeamToUsers, ids[i])
		m.removed_TeamToUsers[ids[i]] = struct{}{}
	}
}

// RemovedTeamToUsers returns the removed IDs of the "TeamToUsers" edge to the User entity.
func (m *TeamMutation) RemovedTeamToUsersIDs() (ids []uuid.UUID) {
	for id := range m.removed_TeamToUsers {
		ids = append(ids, id)
	}
	return
}

// TeamToUsersIDs returns the "TeamToUsers" edge IDs in the mutation.
func (m *TeamMutation) TeamToUsersIDs() (ids []uuid.UUID) {
	for id := range m._TeamToUsers {
		ids = append(ids, id)
	}
	return
}

// ResetTeamToUsers resets all changes to the "TeamToUsers" edge.
func (m *TeamMutation) ResetTeamToUsers() {
	m._TeamToUsers = nil
	m.cleared_TeamToUsers = false
	m.removed_TeamToUsers = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.team_number != nil {
		fields = append(fields, team.FieldTeamNumber)
	}
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldTeamNumber:
		return m.TeamNumber()
	case team.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldTeamNumber:
		return m.OldTeamNumber(ctx)
	case team.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldTeamNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamNumber(v)
		return nil
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	var fields []string
	if m.addteam_number != nil {
		fields = append(fields, team.FieldTeamNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case team.FieldTeamNumber:
		return m.AddedTeamNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	case team.FieldTeamNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTeamNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(team.FieldName) {
		fields = append(fields, team.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	switch name {
	case team.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldTeamNumber:
		m.ResetTeamNumber()
		return nil
	case team.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._TeamToCompetition != nil {
		edges = append(edges, team.EdgeTeamToCompetition)
	}
	if m._TeamToVmObjects != nil {
		edges = append(edges, team.EdgeTeamToVmObjects)
	}
	if m._TeamToUsers != nil {
		edges = append(edges, team.EdgeTeamToUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeTeamToCompetition:
		if id := m._TeamToCompetition; id != nil {
			return []ent.Value{*id}
		}
	case team.EdgeTeamToVmObjects:
		ids := make([]ent.Value, 0, len(m._TeamToVmObjects))
		for id := range m._TeamToVmObjects {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeTeamToUsers:
		ids := make([]ent.Value, 0, len(m._TeamToUsers))
		for id := range m._TeamToUsers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removed_TeamToVmObjects != nil {
		edges = append(edges, team.EdgeTeamToVmObjects)
	}
	if m.removed_TeamToUsers != nil {
		edges = append(edges, team.EdgeTeamToUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeTeamToVmObjects:
		ids := make([]ent.Value, 0, len(m.removed_TeamToVmObjects))
		for id := range m.removed_TeamToVmObjects {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeTeamToUsers:
		ids := make([]ent.Value, 0, len(m.removed_TeamToUsers))
		for id := range m.removed_TeamToUsers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_TeamToCompetition {
		edges = append(edges, team.EdgeTeamToCompetition)
	}
	if m.cleared_TeamToVmObjects {
		edges = append(edges, team.EdgeTeamToVmObjects)
	}
	if m.cleared_TeamToUsers {
		edges = append(edges, team.EdgeTeamToUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgeTeamToCompetition:
		return m.cleared_TeamToCompetition
	case team.EdgeTeamToVmObjects:
		return m.cleared_TeamToVmObjects
	case team.EdgeTeamToUsers:
		return m.cleared_TeamToUsers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	case team.EdgeTeamToCompetition:
		m.ClearTeamToCompetition()
		return nil
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgeTeamToCompetition:
		m.ResetTeamToCompetition()
		return nil
	case team.EdgeTeamToVmObjects:
		m.ResetTeamToVmObjects()
		return nil
	case team.EdgeTeamToUsers:
		m.ResetTeamToUsers()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}

// TokenMutation represents an operation that mutates the Token nodes in the graph.
type TokenMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	token               *string
	expire_at           *int64
	addexpire_at        *int64
	clearedFields       map[string]struct{}
	_TokenToUser        *uuid.UUID
	cleared_TokenToUser bool
	done                bool
	oldValue            func(context.Context) (*Token, error)
	predicates          []predicate.Token
}

var _ ent.Mutation = (*TokenMutation)(nil)

// tokenOption allows management of the mutation configuration using functional options.
type tokenOption func(*TokenMutation)

// newTokenMutation creates new mutation for the Token entity.
func newTokenMutation(c config, op Op, opts ...tokenOption) *TokenMutation {
	m := &TokenMutation{
		config:        c,
		op:            op,
		typ:           TypeToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenID sets the ID field of the mutation.
func withTokenID(id uuid.UUID) tokenOption {
	return func(m *TokenMutation) {
		var (
			err   error
			once  sync.Once
			value *Token
		)
		m.oldValue = func(ctx context.Context) (*Token, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Token.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withToken sets the old Token of the mutation.
func withToken(node *Token) tokenOption {
	return func(m *TokenMutation) {
		m.oldValue = func(context.Context) (*Token, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Token entities.
func (m *TokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Token.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *TokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *TokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *TokenMutation) ResetToken() {
	m.token = nil
}

// SetExpireAt sets the "expire_at" field.
func (m *TokenMutation) SetExpireAt(i int64) {
	m.expire_at = &i
	m.addexpire_at = nil
}

// ExpireAt returns the value of the "expire_at" field in the mutation.
func (m *TokenMutation) ExpireAt() (r int64, exists bool) {
	v := m.expire_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpireAt returns the old "expire_at" field's value of the Token entity.
// If the Token object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenMutation) OldExpireAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpireAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpireAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpireAt: %w", err)
	}
	return oldValue.ExpireAt, nil
}

// AddExpireAt adds i to the "expire_at" field.
func (m *TokenMutation) AddExpireAt(i int64) {
	if m.addexpire_at != nil {
		*m.addexpire_at += i
	} else {
		m.addexpire_at = &i
	}
}

// AddedExpireAt returns the value that was added to the "expire_at" field in this mutation.
func (m *TokenMutation) AddedExpireAt() (r int64, exists bool) {
	v := m.addexpire_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpireAt resets all changes to the "expire_at" field.
func (m *TokenMutation) ResetExpireAt() {
	m.expire_at = nil
	m.addexpire_at = nil
}

// SetTokenToUserID sets the "TokenToUser" edge to the User entity by id.
func (m *TokenMutation) SetTokenToUserID(id uuid.UUID) {
	m._TokenToUser = &id
}

// ClearTokenToUser clears the "TokenToUser" edge to the User entity.
func (m *TokenMutation) ClearTokenToUser() {
	m.cleared_TokenToUser = true
}

// TokenToUserCleared reports if the "TokenToUser" edge to the User entity was cleared.
func (m *TokenMutation) TokenToUserCleared() bool {
	return m.cleared_TokenToUser
}

// TokenToUserID returns the "TokenToUser" edge ID in the mutation.
func (m *TokenMutation) TokenToUserID() (id uuid.UUID, exists bool) {
	if m._TokenToUser != nil {
		return *m._TokenToUser, true
	}
	return
}

// TokenToUserIDs returns the "TokenToUser" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TokenToUserID instead. It exists only for internal usage by the builders.
func (m *TokenMutation) TokenToUserIDs() (ids []uuid.UUID) {
	if id := m._TokenToUser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTokenToUser resets all changes to the "TokenToUser" edge.
func (m *TokenMutation) ResetTokenToUser() {
	m._TokenToUser = nil
	m.cleared_TokenToUser = false
}

// Where appends a list predicates to the TokenMutation builder.
func (m *TokenMutation) Where(ps ...predicate.Token) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TokenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Token).
func (m *TokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.token != nil {
		fields = append(fields, token.FieldToken)
	}
	if m.expire_at != nil {
		fields = append(fields, token.FieldExpireAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case token.FieldToken:
		return m.Token()
	case token.FieldExpireAt:
		return m.ExpireAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case token.FieldToken:
		return m.OldToken(ctx)
	case token.FieldExpireAt:
		return m.OldExpireAt(ctx)
	}
	return nil, fmt.Errorf("unknown Token field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case token.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case token.FieldExpireAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpireAt(v)
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenMutation) AddedFields() []string {
	var fields []string
	if m.addexpire_at != nil {
		fields = append(fields, token.FieldExpireAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case token.FieldExpireAt:
		return m.AddedExpireAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case token.FieldExpireAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpireAt(v)
		return nil
	}
	return fmt.Errorf("unknown Token numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Token nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenMutation) ResetField(name string) error {
	switch name {
	case token.FieldToken:
		m.ResetToken()
		return nil
	case token.FieldExpireAt:
		m.ResetExpireAt()
		return nil
	}
	return fmt.Errorf("unknown Token field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._TokenToUser != nil {
		edges = append(edges, token.EdgeTokenToUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case token.EdgeTokenToUser:
		if id := m._TokenToUser; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_TokenToUser {
		edges = append(edges, token.EdgeTokenToUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenMutation) EdgeCleared(name string) bool {
	switch name {
	case token.EdgeTokenToUser:
		return m.cleared_TokenToUser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenMutation) ClearEdge(name string) error {
	switch name {
	case token.EdgeTokenToUser:
		m.ClearTokenToUser()
		return nil
	}
	return fmt.Errorf("unknown Token unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenMutation) ResetEdge(name string) error {
	switch name {
	case token.EdgeTokenToUser:
		m.ResetTokenToUser()
		return nil
	}
	return fmt.Errorf("unknown Token edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	username              *string
	password              *string
	first_name            *string
	last_name             *string
	role                  *user.Role
	provider              *user.Provider
	clearedFields         map[string]struct{}
	_UserToTeam           *uuid.UUID
	cleared_UserToTeam    bool
	_UserToToken          map[uuid.UUID]struct{}
	removed_UserToToken   map[uuid.UUID]struct{}
	cleared_UserToToken   bool
	_UserToActions        map[uuid.UUID]struct{}
	removed_UserToActions map[uuid.UUID]struct{}
	cleared_UserToActions bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetProvider sets the "provider" field.
func (m *UserMutation) SetProvider(u user.Provider) {
	m.provider = &u
}

// Provider returns the value of the "provider" field in the mutation.
func (m *UserMutation) Provider() (r user.Provider, exists bool) {
	v := m.provider
	if v == nil {
		return
	}
	return *v, true
}

// OldProvider returns the old "provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProvider(ctx context.Context) (v user.Provider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvider: %w", err)
	}
	return oldValue.Provider, nil
}

// ResetProvider resets all changes to the "provider" field.
func (m *UserMutation) ResetProvider() {
	m.provider = nil
}

// SetUserToTeamID sets the "UserToTeam" edge to the Team entity by id.
func (m *UserMutation) SetUserToTeamID(id uuid.UUID) {
	m._UserToTeam = &id
}

// ClearUserToTeam clears the "UserToTeam" edge to the Team entity.
func (m *UserMutation) ClearUserToTeam() {
	m.cleared_UserToTeam = true
}

// UserToTeamCleared reports if the "UserToTeam" edge to the Team entity was cleared.
func (m *UserMutation) UserToTeamCleared() bool {
	return m.cleared_UserToTeam
}

// UserToTeamID returns the "UserToTeam" edge ID in the mutation.
func (m *UserMutation) UserToTeamID() (id uuid.UUID, exists bool) {
	if m._UserToTeam != nil {
		return *m._UserToTeam, true
	}
	return
}

// UserToTeamIDs returns the "UserToTeam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserToTeamID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserToTeamIDs() (ids []uuid.UUID) {
	if id := m._UserToTeam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserToTeam resets all changes to the "UserToTeam" edge.
func (m *UserMutation) ResetUserToTeam() {
	m._UserToTeam = nil
	m.cleared_UserToTeam = false
}

// AddUserToTokenIDs adds the "UserToToken" edge to the Token entity by ids.
func (m *UserMutation) AddUserToTokenIDs(ids ...uuid.UUID) {
	if m._UserToToken == nil {
		m._UserToToken = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._UserToToken[ids[i]] = struct{}{}
	}
}

// ClearUserToToken clears the "UserToToken" edge to the Token entity.
func (m *UserMutation) ClearUserToToken() {
	m.cleared_UserToToken = true
}

// UserToTokenCleared reports if the "UserToToken" edge to the Token entity was cleared.
func (m *UserMutation) UserToTokenCleared() bool {
	return m.cleared_UserToToken
}

// RemoveUserToTokenIDs removes the "UserToToken" edge to the Token entity by IDs.
func (m *UserMutation) RemoveUserToTokenIDs(ids ...uuid.UUID) {
	if m.removed_UserToToken == nil {
		m.removed_UserToToken = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._UserToToken, ids[i])
		m.removed_UserToToken[ids[i]] = struct{}{}
	}
}

// RemovedUserToToken returns the removed IDs of the "UserToToken" edge to the Token entity.
func (m *UserMutation) RemovedUserToTokenIDs() (ids []uuid.UUID) {
	for id := range m.removed_UserToToken {
		ids = append(ids, id)
	}
	return
}

// UserToTokenIDs returns the "UserToToken" edge IDs in the mutation.
func (m *UserMutation) UserToTokenIDs() (ids []uuid.UUID) {
	for id := range m._UserToToken {
		ids = append(ids, id)
	}
	return
}

// ResetUserToToken resets all changes to the "UserToToken" edge.
func (m *UserMutation) ResetUserToToken() {
	m._UserToToken = nil
	m.cleared_UserToToken = false
	m.removed_UserToToken = nil
}

// AddUserToActionIDs adds the "UserToActions" edge to the Action entity by ids.
func (m *UserMutation) AddUserToActionIDs(ids ...uuid.UUID) {
	if m._UserToActions == nil {
		m._UserToActions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._UserToActions[ids[i]] = struct{}{}
	}
}

// ClearUserToActions clears the "UserToActions" edge to the Action entity.
func (m *UserMutation) ClearUserToActions() {
	m.cleared_UserToActions = true
}

// UserToActionsCleared reports if the "UserToActions" edge to the Action entity was cleared.
func (m *UserMutation) UserToActionsCleared() bool {
	return m.cleared_UserToActions
}

// RemoveUserToActionIDs removes the "UserToActions" edge to the Action entity by IDs.
func (m *UserMutation) RemoveUserToActionIDs(ids ...uuid.UUID) {
	if m.removed_UserToActions == nil {
		m.removed_UserToActions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._UserToActions, ids[i])
		m.removed_UserToActions[ids[i]] = struct{}{}
	}
}

// RemovedUserToActions returns the removed IDs of the "UserToActions" edge to the Action entity.
func (m *UserMutation) RemovedUserToActionsIDs() (ids []uuid.UUID) {
	for id := range m.removed_UserToActions {
		ids = append(ids, id)
	}
	return
}

// UserToActionsIDs returns the "UserToActions" edge IDs in the mutation.
func (m *UserMutation) UserToActionsIDs() (ids []uuid.UUID) {
	for id := range m._UserToActions {
		ids = append(ids, id)
	}
	return
}

// ResetUserToActions resets all changes to the "UserToActions" edge.
func (m *UserMutation) ResetUserToActions() {
	m._UserToActions = nil
	m.cleared_UserToActions = false
	m.removed_UserToActions = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.provider != nil {
		fields = append(fields, user.FieldProvider)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldRole:
		return m.Role()
	case user.FieldProvider:
		return m.Provider()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldProvider:
		return m.OldProvider(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldProvider:
		v, ok := value.(user.Provider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvider(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldProvider:
		m.ResetProvider()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._UserToTeam != nil {
		edges = append(edges, user.EdgeUserToTeam)
	}
	if m._UserToToken != nil {
		edges = append(edges, user.EdgeUserToToken)
	}
	if m._UserToActions != nil {
		edges = append(edges, user.EdgeUserToActions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserToTeam:
		if id := m._UserToTeam; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeUserToToken:
		ids := make([]ent.Value, 0, len(m._UserToToken))
		for id := range m._UserToToken {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserToActions:
		ids := make([]ent.Value, 0, len(m._UserToActions))
		for id := range m._UserToActions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removed_UserToToken != nil {
		edges = append(edges, user.EdgeUserToToken)
	}
	if m.removed_UserToActions != nil {
		edges = append(edges, user.EdgeUserToActions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserToToken:
		ids := make([]ent.Value, 0, len(m.removed_UserToToken))
		for id := range m.removed_UserToToken {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserToActions:
		ids := make([]ent.Value, 0, len(m.removed_UserToActions))
		for id := range m.removed_UserToActions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_UserToTeam {
		edges = append(edges, user.EdgeUserToTeam)
	}
	if m.cleared_UserToToken {
		edges = append(edges, user.EdgeUserToToken)
	}
	if m.cleared_UserToActions {
		edges = append(edges, user.EdgeUserToActions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserToTeam:
		return m.cleared_UserToTeam
	case user.EdgeUserToToken:
		return m.cleared_UserToToken
	case user.EdgeUserToActions:
		return m.cleared_UserToActions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeUserToTeam:
		m.ClearUserToTeam()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserToTeam:
		m.ResetUserToTeam()
		return nil
	case user.EdgeUserToToken:
		m.ResetUserToToken()
		return nil
	case user.EdgeUserToActions:
		m.ResetUserToActions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VmObjectMutation represents an operation that mutates the VmObject nodes in the graph.
type VmObjectMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	name                   *string
	identifier             *string
	ip_addresses           *[]string
	locked                 *bool
	clearedFields          map[string]struct{}
	_VmObjectToTeam        *uuid.UUID
	cleared_VmObjectToTeam bool
	done                   bool
	oldValue               func(context.Context) (*VmObject, error)
	predicates             []predicate.VmObject
}

var _ ent.Mutation = (*VmObjectMutation)(nil)

// vmobjectOption allows management of the mutation configuration using functional options.
type vmobjectOption func(*VmObjectMutation)

// newVmObjectMutation creates new mutation for the VmObject entity.
func newVmObjectMutation(c config, op Op, opts ...vmobjectOption) *VmObjectMutation {
	m := &VmObjectMutation{
		config:        c,
		op:            op,
		typ:           TypeVmObject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVmObjectID sets the ID field of the mutation.
func withVmObjectID(id uuid.UUID) vmobjectOption {
	return func(m *VmObjectMutation) {
		var (
			err   error
			once  sync.Once
			value *VmObject
		)
		m.oldValue = func(ctx context.Context) (*VmObject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VmObject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVmObject sets the old VmObject of the mutation.
func withVmObject(node *VmObject) vmobjectOption {
	return func(m *VmObjectMutation) {
		m.oldValue = func(context.Context) (*VmObject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VmObjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VmObjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VmObject entities.
func (m *VmObjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VmObjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VmObjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VmObject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VmObjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VmObjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VmObjectMutation) ResetName() {
	m.name = nil
}

// SetIdentifier sets the "identifier" field.
func (m *VmObjectMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *VmObjectMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *VmObjectMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetIPAddresses sets the "ip_addresses" field.
func (m *VmObjectMutation) SetIPAddresses(s []string) {
	m.ip_addresses = &s
}

// IPAddresses returns the value of the "ip_addresses" field in the mutation.
func (m *VmObjectMutation) IPAddresses() (r []string, exists bool) {
	v := m.ip_addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddresses returns the old "ip_addresses" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldIPAddresses(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddresses: %w", err)
	}
	return oldValue.IPAddresses, nil
}

// ClearIPAddresses clears the value of the "ip_addresses" field.
func (m *VmObjectMutation) ClearIPAddresses() {
	m.ip_addresses = nil
	m.clearedFields[vmobject.FieldIPAddresses] = struct{}{}
}

// IPAddressesCleared returns if the "ip_addresses" field was cleared in this mutation.
func (m *VmObjectMutation) IPAddressesCleared() bool {
	_, ok := m.clearedFields[vmobject.FieldIPAddresses]
	return ok
}

// ResetIPAddresses resets all changes to the "ip_addresses" field.
func (m *VmObjectMutation) ResetIPAddresses() {
	m.ip_addresses = nil
	delete(m.clearedFields, vmobject.FieldIPAddresses)
}

// SetLocked sets the "locked" field.
func (m *VmObjectMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *VmObjectMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *VmObjectMutation) ResetLocked() {
	m.locked = nil
}

// SetVmObjectToTeamID sets the "VmObjectToTeam" edge to the Team entity by id.
func (m *VmObjectMutation) SetVmObjectToTeamID(id uuid.UUID) {
	m._VmObjectToTeam = &id
}

// ClearVmObjectToTeam clears the "VmObjectToTeam" edge to the Team entity.
func (m *VmObjectMutation) ClearVmObjectToTeam() {
	m.cleared_VmObjectToTeam = true
}

// VmObjectToTeamCleared reports if the "VmObjectToTeam" edge to the Team entity was cleared.
func (m *VmObjectMutation) VmObjectToTeamCleared() bool {
	return m.cleared_VmObjectToTeam
}

// VmObjectToTeamID returns the "VmObjectToTeam" edge ID in the mutation.
func (m *VmObjectMutation) VmObjectToTeamID() (id uuid.UUID, exists bool) {
	if m._VmObjectToTeam != nil {
		return *m._VmObjectToTeam, true
	}
	return
}

// VmObjectToTeamIDs returns the "VmObjectToTeam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VmObjectToTeamID instead. It exists only for internal usage by the builders.
func (m *VmObjectMutation) VmObjectToTeamIDs() (ids []uuid.UUID) {
	if id := m._VmObjectToTeam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVmObjectToTeam resets all changes to the "VmObjectToTeam" edge.
func (m *VmObjectMutation) ResetVmObjectToTeam() {
	m._VmObjectToTeam = nil
	m.cleared_VmObjectToTeam = false
}

// Where appends a list predicates to the VmObjectMutation builder.
func (m *VmObjectMutation) Where(ps ...predicate.VmObject) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VmObjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VmObject).
func (m *VmObjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VmObjectMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, vmobject.FieldName)
	}
	if m.identifier != nil {
		fields = append(fields, vmobject.FieldIdentifier)
	}
	if m.ip_addresses != nil {
		fields = append(fields, vmobject.FieldIPAddresses)
	}
	if m.locked != nil {
		fields = append(fields, vmobject.FieldLocked)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VmObjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vmobject.FieldName:
		return m.Name()
	case vmobject.FieldIdentifier:
		return m.Identifier()
	case vmobject.FieldIPAddresses:
		return m.IPAddresses()
	case vmobject.FieldLocked:
		return m.Locked()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VmObjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vmobject.FieldName:
		return m.OldName(ctx)
	case vmobject.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case vmobject.FieldIPAddresses:
		return m.OldIPAddresses(ctx)
	case vmobject.FieldLocked:
		return m.OldLocked(ctx)
	}
	return nil, fmt.Errorf("unknown VmObject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VmObjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vmobject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case vmobject.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case vmobject.FieldIPAddresses:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddresses(v)
		return nil
	case vmobject.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	}
	return fmt.Errorf("unknown VmObject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VmObjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VmObjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VmObjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VmObject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VmObjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vmobject.FieldIPAddresses) {
		fields = append(fields, vmobject.FieldIPAddresses)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VmObjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VmObjectMutation) ClearField(name string) error {
	switch name {
	case vmobject.FieldIPAddresses:
		m.ClearIPAddresses()
		return nil
	}
	return fmt.Errorf("unknown VmObject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VmObjectMutation) ResetField(name string) error {
	switch name {
	case vmobject.FieldName:
		m.ResetName()
		return nil
	case vmobject.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case vmobject.FieldIPAddresses:
		m.ResetIPAddresses()
		return nil
	case vmobject.FieldLocked:
		m.ResetLocked()
		return nil
	}
	return fmt.Errorf("unknown VmObject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VmObjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._VmObjectToTeam != nil {
		edges = append(edges, vmobject.EdgeVmObjectToTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VmObjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vmobject.EdgeVmObjectToTeam:
		if id := m._VmObjectToTeam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VmObjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VmObjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VmObjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_VmObjectToTeam {
		edges = append(edges, vmobject.EdgeVmObjectToTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VmObjectMutation) EdgeCleared(name string) bool {
	switch name {
	case vmobject.EdgeVmObjectToTeam:
		return m.cleared_VmObjectToTeam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VmObjectMutation) ClearEdge(name string) error {
	switch name {
	case vmobject.EdgeVmObjectToTeam:
		m.ClearVmObjectToTeam()
		return nil
	}
	return fmt.Errorf("unknown VmObject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VmObjectMutation) ResetEdge(name string) error {
	switch name {
	case vmobject.EdgeVmObjectToTeam:
		m.ResetVmObjectToTeam()
		return nil
	}
	return fmt.Errorf("unknown VmObject edge %s", name)
}
