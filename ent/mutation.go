// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/BradHacker/compsole/ent/predicate"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/BradHacker/compsole/ent/vmobject"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTeam     = "Team"
	TypeVmObject = "VmObject"
)

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	team_number         *int
	addteam_number      *int
	name                *string
	clearedFields       map[string]struct{}
	_ToVmObjects        map[uuid.UUID]struct{}
	removed_ToVmObjects map[uuid.UUID]struct{}
	cleared_ToVmObjects bool
	done                bool
	oldValue            func(context.Context) (*Team, error)
	predicates          []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id uuid.UUID) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Team entities.
func (m *TeamMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTeamNumber sets the "team_number" field.
func (m *TeamMutation) SetTeamNumber(i int) {
	m.team_number = &i
	m.addteam_number = nil
}

// TeamNumber returns the value of the "team_number" field in the mutation.
func (m *TeamMutation) TeamNumber() (r int, exists bool) {
	v := m.team_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTeamNumber returns the old "team_number" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldTeamNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeamNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeamNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeamNumber: %w", err)
	}
	return oldValue.TeamNumber, nil
}

// AddTeamNumber adds i to the "team_number" field.
func (m *TeamMutation) AddTeamNumber(i int) {
	if m.addteam_number != nil {
		*m.addteam_number += i
	} else {
		m.addteam_number = &i
	}
}

// AddedTeamNumber returns the value that was added to the "team_number" field in this mutation.
func (m *TeamMutation) AddedTeamNumber() (r int, exists bool) {
	v := m.addteam_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTeamNumber resets all changes to the "team_number" field.
func (m *TeamMutation) ResetTeamNumber() {
	m.team_number = nil
	m.addteam_number = nil
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TeamMutation) ClearName() {
	m.name = nil
	m.clearedFields[team.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TeamMutation) NameCleared() bool {
	_, ok := m.clearedFields[team.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, team.FieldName)
}

// AddToVmObjectIDs adds the "ToVmObjects" edge to the VmObject entity by ids.
func (m *TeamMutation) AddToVmObjectIDs(ids ...uuid.UUID) {
	if m._ToVmObjects == nil {
		m._ToVmObjects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._ToVmObjects[ids[i]] = struct{}{}
	}
}

// ClearToVmObjects clears the "ToVmObjects" edge to the VmObject entity.
func (m *TeamMutation) ClearToVmObjects() {
	m.cleared_ToVmObjects = true
}

// ToVmObjectsCleared reports if the "ToVmObjects" edge to the VmObject entity was cleared.
func (m *TeamMutation) ToVmObjectsCleared() bool {
	return m.cleared_ToVmObjects
}

// RemoveToVmObjectIDs removes the "ToVmObjects" edge to the VmObject entity by IDs.
func (m *TeamMutation) RemoveToVmObjectIDs(ids ...uuid.UUID) {
	if m.removed_ToVmObjects == nil {
		m.removed_ToVmObjects = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._ToVmObjects, ids[i])
		m.removed_ToVmObjects[ids[i]] = struct{}{}
	}
}

// RemovedToVmObjects returns the removed IDs of the "ToVmObjects" edge to the VmObject entity.
func (m *TeamMutation) RemovedToVmObjectsIDs() (ids []uuid.UUID) {
	for id := range m.removed_ToVmObjects {
		ids = append(ids, id)
	}
	return
}

// ToVmObjectsIDs returns the "ToVmObjects" edge IDs in the mutation.
func (m *TeamMutation) ToVmObjectsIDs() (ids []uuid.UUID) {
	for id := range m._ToVmObjects {
		ids = append(ids, id)
	}
	return
}

// ResetToVmObjects resets all changes to the "ToVmObjects" edge.
func (m *TeamMutation) ResetToVmObjects() {
	m._ToVmObjects = nil
	m.cleared_ToVmObjects = false
	m.removed_ToVmObjects = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.team_number != nil {
		fields = append(fields, team.FieldTeamNumber)
	}
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldTeamNumber:
		return m.TeamNumber()
	case team.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldTeamNumber:
		return m.OldTeamNumber(ctx)
	case team.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldTeamNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeamNumber(v)
		return nil
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	var fields []string
	if m.addteam_number != nil {
		fields = append(fields, team.FieldTeamNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case team.FieldTeamNumber:
		return m.AddedTeamNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	case team.FieldTeamNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTeamNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(team.FieldName) {
		fields = append(fields, team.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	switch name {
	case team.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldTeamNumber:
		m.ResetTeamNumber()
		return nil
	case team.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ToVmObjects != nil {
		edges = append(edges, team.EdgeToVmObjects)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeToVmObjects:
		ids := make([]ent.Value, 0, len(m._ToVmObjects))
		for id := range m._ToVmObjects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ToVmObjects != nil {
		edges = append(edges, team.EdgeToVmObjects)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgeToVmObjects:
		ids := make([]ent.Value, 0, len(m.removed_ToVmObjects))
		for id := range m.removed_ToVmObjects {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_ToVmObjects {
		edges = append(edges, team.EdgeToVmObjects)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgeToVmObjects:
		return m.cleared_ToVmObjects
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgeToVmObjects:
		m.ResetToVmObjects()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}

// VmObjectMutation represents an operation that mutates the VmObject nodes in the graph.
type VmObjectMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	name           *string
	identifier     *string
	ip_addresses   *[]string
	clearedFields  map[string]struct{}
	_ToTeam        map[uuid.UUID]struct{}
	removed_ToTeam map[uuid.UUID]struct{}
	cleared_ToTeam bool
	done           bool
	oldValue       func(context.Context) (*VmObject, error)
	predicates     []predicate.VmObject
}

var _ ent.Mutation = (*VmObjectMutation)(nil)

// vmobjectOption allows management of the mutation configuration using functional options.
type vmobjectOption func(*VmObjectMutation)

// newVmObjectMutation creates new mutation for the VmObject entity.
func newVmObjectMutation(c config, op Op, opts ...vmobjectOption) *VmObjectMutation {
	m := &VmObjectMutation{
		config:        c,
		op:            op,
		typ:           TypeVmObject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVmObjectID sets the ID field of the mutation.
func withVmObjectID(id uuid.UUID) vmobjectOption {
	return func(m *VmObjectMutation) {
		var (
			err   error
			once  sync.Once
			value *VmObject
		)
		m.oldValue = func(ctx context.Context) (*VmObject, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VmObject.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVmObject sets the old VmObject of the mutation.
func withVmObject(node *VmObject) vmobjectOption {
	return func(m *VmObjectMutation) {
		m.oldValue = func(context.Context) (*VmObject, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VmObjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VmObjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VmObject entities.
func (m *VmObjectMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VmObjectMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VmObjectMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VmObject.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *VmObjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VmObjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VmObjectMutation) ResetName() {
	m.name = nil
}

// SetIdentifier sets the "identifier" field.
func (m *VmObjectMutation) SetIdentifier(s string) {
	m.identifier = &s
}

// Identifier returns the value of the "identifier" field in the mutation.
func (m *VmObjectMutation) Identifier() (r string, exists bool) {
	v := m.identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentifier returns the old "identifier" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentifier: %w", err)
	}
	return oldValue.Identifier, nil
}

// ResetIdentifier resets all changes to the "identifier" field.
func (m *VmObjectMutation) ResetIdentifier() {
	m.identifier = nil
}

// SetIPAddresses sets the "ip_addresses" field.
func (m *VmObjectMutation) SetIPAddresses(s []string) {
	m.ip_addresses = &s
}

// IPAddresses returns the value of the "ip_addresses" field in the mutation.
func (m *VmObjectMutation) IPAddresses() (r []string, exists bool) {
	v := m.ip_addresses
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddresses returns the old "ip_addresses" field's value of the VmObject entity.
// If the VmObject object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VmObjectMutation) OldIPAddresses(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddresses is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddresses requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddresses: %w", err)
	}
	return oldValue.IPAddresses, nil
}

// ClearIPAddresses clears the value of the "ip_addresses" field.
func (m *VmObjectMutation) ClearIPAddresses() {
	m.ip_addresses = nil
	m.clearedFields[vmobject.FieldIPAddresses] = struct{}{}
}

// IPAddressesCleared returns if the "ip_addresses" field was cleared in this mutation.
func (m *VmObjectMutation) IPAddressesCleared() bool {
	_, ok := m.clearedFields[vmobject.FieldIPAddresses]
	return ok
}

// ResetIPAddresses resets all changes to the "ip_addresses" field.
func (m *VmObjectMutation) ResetIPAddresses() {
	m.ip_addresses = nil
	delete(m.clearedFields, vmobject.FieldIPAddresses)
}

// AddToTeamIDs adds the "ToTeam" edge to the Team entity by ids.
func (m *VmObjectMutation) AddToTeamIDs(ids ...uuid.UUID) {
	if m._ToTeam == nil {
		m._ToTeam = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._ToTeam[ids[i]] = struct{}{}
	}
}

// ClearToTeam clears the "ToTeam" edge to the Team entity.
func (m *VmObjectMutation) ClearToTeam() {
	m.cleared_ToTeam = true
}

// ToTeamCleared reports if the "ToTeam" edge to the Team entity was cleared.
func (m *VmObjectMutation) ToTeamCleared() bool {
	return m.cleared_ToTeam
}

// RemoveToTeamIDs removes the "ToTeam" edge to the Team entity by IDs.
func (m *VmObjectMutation) RemoveToTeamIDs(ids ...uuid.UUID) {
	if m.removed_ToTeam == nil {
		m.removed_ToTeam = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._ToTeam, ids[i])
		m.removed_ToTeam[ids[i]] = struct{}{}
	}
}

// RemovedToTeam returns the removed IDs of the "ToTeam" edge to the Team entity.
func (m *VmObjectMutation) RemovedToTeamIDs() (ids []uuid.UUID) {
	for id := range m.removed_ToTeam {
		ids = append(ids, id)
	}
	return
}

// ToTeamIDs returns the "ToTeam" edge IDs in the mutation.
func (m *VmObjectMutation) ToTeamIDs() (ids []uuid.UUID) {
	for id := range m._ToTeam {
		ids = append(ids, id)
	}
	return
}

// ResetToTeam resets all changes to the "ToTeam" edge.
func (m *VmObjectMutation) ResetToTeam() {
	m._ToTeam = nil
	m.cleared_ToTeam = false
	m.removed_ToTeam = nil
}

// Where appends a list predicates to the VmObjectMutation builder.
func (m *VmObjectMutation) Where(ps ...predicate.VmObject) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VmObjectMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VmObject).
func (m *VmObjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VmObjectMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, vmobject.FieldName)
	}
	if m.identifier != nil {
		fields = append(fields, vmobject.FieldIdentifier)
	}
	if m.ip_addresses != nil {
		fields = append(fields, vmobject.FieldIPAddresses)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VmObjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vmobject.FieldName:
		return m.Name()
	case vmobject.FieldIdentifier:
		return m.Identifier()
	case vmobject.FieldIPAddresses:
		return m.IPAddresses()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VmObjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vmobject.FieldName:
		return m.OldName(ctx)
	case vmobject.FieldIdentifier:
		return m.OldIdentifier(ctx)
	case vmobject.FieldIPAddresses:
		return m.OldIPAddresses(ctx)
	}
	return nil, fmt.Errorf("unknown VmObject field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VmObjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vmobject.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case vmobject.FieldIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentifier(v)
		return nil
	case vmobject.FieldIPAddresses:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddresses(v)
		return nil
	}
	return fmt.Errorf("unknown VmObject field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VmObjectMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VmObjectMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VmObjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VmObject numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VmObjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vmobject.FieldIPAddresses) {
		fields = append(fields, vmobject.FieldIPAddresses)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VmObjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VmObjectMutation) ClearField(name string) error {
	switch name {
	case vmobject.FieldIPAddresses:
		m.ClearIPAddresses()
		return nil
	}
	return fmt.Errorf("unknown VmObject nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VmObjectMutation) ResetField(name string) error {
	switch name {
	case vmobject.FieldName:
		m.ResetName()
		return nil
	case vmobject.FieldIdentifier:
		m.ResetIdentifier()
		return nil
	case vmobject.FieldIPAddresses:
		m.ResetIPAddresses()
		return nil
	}
	return fmt.Errorf("unknown VmObject field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VmObjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ToTeam != nil {
		edges = append(edges, vmobject.EdgeToTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VmObjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vmobject.EdgeToTeam:
		ids := make([]ent.Value, 0, len(m._ToTeam))
		for id := range m._ToTeam {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VmObjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ToTeam != nil {
		edges = append(edges, vmobject.EdgeToTeam)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VmObjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vmobject.EdgeToTeam:
		ids := make([]ent.Value, 0, len(m.removed_ToTeam))
		for id := range m.removed_ToTeam {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VmObjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_ToTeam {
		edges = append(edges, vmobject.EdgeToTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VmObjectMutation) EdgeCleared(name string) bool {
	switch name {
	case vmobject.EdgeToTeam:
		return m.cleared_ToTeam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VmObjectMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown VmObject unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VmObjectMutation) ResetEdge(name string) error {
	switch name {
	case vmobject.EdgeToTeam:
		m.ResetToTeam()
		return nil
	}
	return fmt.Errorf("unknown VmObject edge %s", name)
}
