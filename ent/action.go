// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/BradHacker/compsole/ent/action"
	"github.com/BradHacker/compsole/ent/user"
	"github.com/google/uuid"
)

// Action is the model entity for the Action schema.
type Action struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Type holds the value of the "type" field.
	Type action.Type `json:"type,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// PerformedAt holds the value of the "performed_at" field.
	PerformedAt time.Time `json:"performed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActionQuery when eager-loading is set.
	Edges                 ActionEdges `json:"edges"`
	action_action_to_user *uuid.UUID
}

// ActionEdges holds the relations/edges for other nodes in the graph.
type ActionEdges struct {
	// ActionToUser holds the value of the ActionToUser edge.
	ActionToUser *User `json:"ActionToUser,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActionToUserOrErr returns the ActionToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActionEdges) ActionToUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.ActionToUser == nil {
			// The edge ActionToUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ActionToUser, nil
	}
	return nil, &NotLoadedError{edge: "ActionToUser"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Action) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case action.FieldIPAddress, action.FieldType, action.FieldMessage:
			values[i] = new(sql.NullString)
		case action.FieldPerformedAt:
			values[i] = new(sql.NullTime)
		case action.FieldID:
			values[i] = new(uuid.UUID)
		case action.ForeignKeys[0]: // action_action_to_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Action", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Action fields.
func (a *Action) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case action.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case action.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				a.IPAddress = value.String
			}
		case action.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = action.Type(value.String)
			}
		case action.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				a.Message = value.String
			}
		case action.FieldPerformedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field performed_at", values[i])
			} else if value.Valid {
				a.PerformedAt = value.Time
			}
		case action.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field action_action_to_user", values[i])
			} else if value.Valid {
				a.action_action_to_user = new(uuid.UUID)
				*a.action_action_to_user = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryActionToUser queries the "ActionToUser" edge of the Action entity.
func (a *Action) QueryActionToUser() *UserQuery {
	return (&ActionClient{config: a.config}).QueryActionToUser(a)
}

// Update returns a builder for updating this Action.
// Note that you need to call Action.Unwrap() before calling this method if this Action
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Action) Update() *ActionUpdateOne {
	return (&ActionClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Action entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Action) Unwrap() *Action {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Action is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Action) String() string {
	var builder strings.Builder
	builder.WriteString("Action(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", ip_address=")
	builder.WriteString(a.IPAddress)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", message=")
	builder.WriteString(a.Message)
	builder.WriteString(", performed_at=")
	builder.WriteString(a.PerformedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Actions is a parsable slice of Action.
type Actions []*Action

func (a Actions) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
