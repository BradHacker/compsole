// Code generated by entc, DO NOT EDIT.

package vmobject

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the vmobject type in the database.
	Label = "vm_object"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldIPAddresses holds the string denoting the ip_addresses field in the database.
	FieldIPAddresses = "ip_addresses"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// EdgeVmObjectToTeam holds the string denoting the vmobjecttoteam edge name in mutations.
	EdgeVmObjectToTeam = "VmObjectToTeam"
	// Table holds the table name of the vmobject in the database.
	Table = "vm_objects"
	// VmObjectToTeamTable is the table that holds the VmObjectToTeam relation/edge.
	VmObjectToTeamTable = "vm_objects"
	// VmObjectToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	VmObjectToTeamInverseTable = "teams"
	// VmObjectToTeamColumn is the table column denoting the VmObjectToTeam relation/edge.
	VmObjectToTeamColumn = "team_team_to_vm_objects"
)

// Columns holds all SQL columns for vmobject fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIdentifier,
	FieldIPAddresses,
	FieldLocked,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "vm_objects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_team_to_vm_objects",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
