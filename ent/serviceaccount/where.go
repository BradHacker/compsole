// Code generated by entc, DO NOT EDIT.

package serviceaccount

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BradHacker/compsole/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIKey), v))
	})
}

// APISecret applies equality check predicate on the "api_secret" field. It's identical to APISecretEQ.
func APISecret(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPISecret), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPIKey), v))
	})
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPIKey), v))
	})
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...uuid.UUID) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPIKey), v...))
	})
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...uuid.UUID) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPIKey), v...))
	})
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPIKey), v))
	})
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPIKey), v))
	})
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPIKey), v))
	})
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPIKey), v))
	})
}

// APISecretEQ applies the EQ predicate on the "api_secret" field.
func APISecretEQ(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAPISecret), v))
	})
}

// APISecretNEQ applies the NEQ predicate on the "api_secret" field.
func APISecretNEQ(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAPISecret), v))
	})
}

// APISecretIn applies the In predicate on the "api_secret" field.
func APISecretIn(vs ...uuid.UUID) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAPISecret), v...))
	})
}

// APISecretNotIn applies the NotIn predicate on the "api_secret" field.
func APISecretNotIn(vs ...uuid.UUID) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAPISecret), v...))
	})
}

// APISecretGT applies the GT predicate on the "api_secret" field.
func APISecretGT(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAPISecret), v))
	})
}

// APISecretGTE applies the GTE predicate on the "api_secret" field.
func APISecretGTE(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAPISecret), v))
	})
}

// APISecretLT applies the LT predicate on the "api_secret" field.
func APISecretLT(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAPISecret), v))
	})
}

// APISecretLTE applies the LTE predicate on the "api_secret" field.
func APISecretLTE(v uuid.UUID) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAPISecret), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v Active) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v Active) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// ActiveIn applies the In predicate on the "active" field.
func ActiveIn(vs ...Active) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActive), v...))
	})
}

// ActiveNotIn applies the NotIn predicate on the "active" field.
func ActiveNotIn(vs ...Active) predicate.ServiceAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActive), v...))
	})
}

// HasServiceAccountToActions applies the HasEdge predicate on the "ServiceAccountToActions" edge.
func HasServiceAccountToActions() predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceAccountToActionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceAccountToActionsTable, ServiceAccountToActionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceAccountToActionsWith applies the HasEdge predicate on the "ServiceAccountToActions" edge with a given conditions (other predicates).
func HasServiceAccountToActionsWith(preds ...predicate.Action) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceAccountToActionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceAccountToActionsTable, ServiceAccountToActionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceAccount) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceAccount) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceAccount) predicate.ServiceAccount {
	return predicate.ServiceAccount(func(s *sql.Selector) {
		p(s.Not())
	})
}
