// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/compsole/ent/team"
	"github.com/BradHacker/compsole/ent/vmobject"
	"github.com/google/uuid"
)

// VmObjectCreate is the builder for creating a VmObject entity.
type VmObjectCreate struct {
	config
	mutation *VmObjectMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (voc *VmObjectCreate) SetName(s string) *VmObjectCreate {
	voc.mutation.SetName(s)
	return voc
}

// SetIdentifier sets the "identifier" field.
func (voc *VmObjectCreate) SetIdentifier(s string) *VmObjectCreate {
	voc.mutation.SetIdentifier(s)
	return voc
}

// SetIPAddresses sets the "ip_addresses" field.
func (voc *VmObjectCreate) SetIPAddresses(s []string) *VmObjectCreate {
	voc.mutation.SetIPAddresses(s)
	return voc
}

// SetLocked sets the "locked" field.
func (voc *VmObjectCreate) SetLocked(b bool) *VmObjectCreate {
	voc.mutation.SetLocked(b)
	return voc
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (voc *VmObjectCreate) SetNillableLocked(b *bool) *VmObjectCreate {
	if b != nil {
		voc.SetLocked(*b)
	}
	return voc
}

// SetID sets the "id" field.
func (voc *VmObjectCreate) SetID(u uuid.UUID) *VmObjectCreate {
	voc.mutation.SetID(u)
	return voc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (voc *VmObjectCreate) SetNillableID(u *uuid.UUID) *VmObjectCreate {
	if u != nil {
		voc.SetID(*u)
	}
	return voc
}

// SetVmObjectToTeamID sets the "VmObjectToTeam" edge to the Team entity by ID.
func (voc *VmObjectCreate) SetVmObjectToTeamID(id uuid.UUID) *VmObjectCreate {
	voc.mutation.SetVmObjectToTeamID(id)
	return voc
}

// SetNillableVmObjectToTeamID sets the "VmObjectToTeam" edge to the Team entity by ID if the given value is not nil.
func (voc *VmObjectCreate) SetNillableVmObjectToTeamID(id *uuid.UUID) *VmObjectCreate {
	if id != nil {
		voc = voc.SetVmObjectToTeamID(*id)
	}
	return voc
}

// SetVmObjectToTeam sets the "VmObjectToTeam" edge to the Team entity.
func (voc *VmObjectCreate) SetVmObjectToTeam(t *Team) *VmObjectCreate {
	return voc.SetVmObjectToTeamID(t.ID)
}

// Mutation returns the VmObjectMutation object of the builder.
func (voc *VmObjectCreate) Mutation() *VmObjectMutation {
	return voc.mutation
}

// Save creates the VmObject in the database.
func (voc *VmObjectCreate) Save(ctx context.Context) (*VmObject, error) {
	var (
		err  error
		node *VmObject
	)
	voc.defaults()
	if len(voc.hooks) == 0 {
		if err = voc.check(); err != nil {
			return nil, err
		}
		node, err = voc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VmObjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = voc.check(); err != nil {
				return nil, err
			}
			voc.mutation = mutation
			if node, err = voc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(voc.hooks) - 1; i >= 0; i-- {
			if voc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = voc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, voc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (voc *VmObjectCreate) SaveX(ctx context.Context) *VmObject {
	v, err := voc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (voc *VmObjectCreate) Exec(ctx context.Context) error {
	_, err := voc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (voc *VmObjectCreate) ExecX(ctx context.Context) {
	if err := voc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (voc *VmObjectCreate) defaults() {
	if _, ok := voc.mutation.Locked(); !ok {
		v := vmobject.DefaultLocked
		voc.mutation.SetLocked(v)
	}
	if _, ok := voc.mutation.ID(); !ok {
		v := vmobject.DefaultID()
		voc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (voc *VmObjectCreate) check() error {
	if _, ok := voc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "VmObject.name"`)}
	}
	if _, ok := voc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "VmObject.identifier"`)}
	}
	if _, ok := voc.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "VmObject.locked"`)}
	}
	return nil
}

func (voc *VmObjectCreate) sqlSave(ctx context.Context) (*VmObject, error) {
	_node, _spec := voc.createSpec()
	if err := sqlgraph.CreateNode(ctx, voc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (voc *VmObjectCreate) createSpec() (*VmObject, *sqlgraph.CreateSpec) {
	var (
		_node = &VmObject{config: voc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vmobject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vmobject.FieldID,
			},
		}
	)
	if id, ok := voc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := voc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vmobject.FieldName,
		})
		_node.Name = value
	}
	if value, ok := voc.mutation.Identifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vmobject.FieldIdentifier,
		})
		_node.Identifier = value
	}
	if value, ok := voc.mutation.IPAddresses(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vmobject.FieldIPAddresses,
		})
		_node.IPAddresses = value
	}
	if value, ok := voc.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vmobject.FieldLocked,
		})
		_node.Locked = value
	}
	if nodes := voc.mutation.VmObjectToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vmobject.VmObjectToTeamTable,
			Columns: []string{vmobject.VmObjectToTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.vm_object_vm_object_to_team = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VmObjectCreateBulk is the builder for creating many VmObject entities in bulk.
type VmObjectCreateBulk struct {
	config
	builders []*VmObjectCreate
}

// Save creates the VmObject entities in the database.
func (vocb *VmObjectCreateBulk) Save(ctx context.Context) ([]*VmObject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vocb.builders))
	nodes := make([]*VmObject, len(vocb.builders))
	mutators := make([]Mutator, len(vocb.builders))
	for i := range vocb.builders {
		func(i int, root context.Context) {
			builder := vocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VmObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vocb *VmObjectCreateBulk) SaveX(ctx context.Context) []*VmObject {
	v, err := vocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vocb *VmObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := vocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vocb *VmObjectCreateBulk) ExecX(ctx context.Context) {
	if err := vocb.Exec(ctx); err != nil {
		panic(err)
	}
}
